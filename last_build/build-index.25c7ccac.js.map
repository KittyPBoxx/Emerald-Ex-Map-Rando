{"mappings":"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","sources":["dist/Network/Network.js"],"sourcesContent":["/***************************************/\n/*\n/*  Connection Manager \n/*  For handling the actual p2p connections\n/*\n****************************************/\n\nfunction ConnectionManager(syncStateManager) {\n\n    this.peer = null;\n    this.connections = new Map(); // Peer Id to connection\n    this.playerList = new Map();\n    this.options = { \n                        debug: 0,\n                        config: {\n                            iceServers: [\n                                { urls : \"stun:stun.l.google.com:19302\" },\n                                { urls : \"turn:0.peerjs.com:3478\",   username : \"peerjs\", credential : \"peerjsp\" }\n                            ],\n                            sdpSemantics: 'unified-plan'\n                        }\n                    };\n    this.messageHandler = new MessageHandler(this);\n    this.syncStateManager = syncStateManager;\n\n}\n\nConnectionManager.prototype.init = function (isHost, nickname, callback) {\n\n    if (this.peer && connectionManager.peer._open) {\n        return;\n    } else if (this.peer) {\n        this.peer.reconnect();\n        return;\n    }\n    \n    this.peer = new Peer(this.options);\n\n    let manager = this;\n\n    this.peer.on('open', function(id) {\n        console.log('Peer ID is: ' + id);\n        let player = new Player(isHost, nickname, id);\n        manager.playerList.set(id, player);\n        callback(player);\n    });\n\n    this.peer.on('connection', function(connection) {\n        manager.connections.set(connection.peer, connection);\n        manager.attachConnectionHandlers(connection, isHost);\n    });\n\n    this.peer.on('disconnected', netoworkDisconnect);\n\n    syncMultiplayerStates = true;\n    let syncStateManager = this.syncStateManager;\n    syncStateManager.onUpdateFinished = function() {\n        manager.sendMessage(new Message(MessageType.UPDATE_SYNC_STATE, syncStateManager.localSyncState));\n    }\n}\n\nConnectionManager.prototype.connectToHost = function (id, connectionReadyCallback) {\n    let connectionToHost = this.peer.connect(id);\n    this.connections.set(id, connectionToHost);\n    this.attachConnectionHandlers(connectionToHost);\n    connectionToHost.on('open', connectionReadyCallback);\n}\n\nConnectionManager.prototype.attachConnectionHandlers = function (connection, isHost) {\n\n    let manager = this;\n\tconnection.on('data', function(data) {\n        manager.messageHandler.onMessage(data);\n    });\n\n    connection.on('close', function() {\n        manager.connections.delete(this.peer);\n        manager.playerList.delete(this.peer);\n        updatePlayerList();\n\n        if (isHost) {\n            manager.sendMessage(new Message(MessageType.PLAYER_LIST, new PlayerList(manager.playerList)))\n        }\n    });\n\n    connection.on('error', function(data) {\n        console.error(data);\n    });\n\n}\n\nConnectionManager.prototype.sendMessage = function (message) {\n\n    connectionManager.connections.forEach(async (connection, id) => { \n\n        // Apparently the connection opened event gets fired before the connection is actually ready to send messages\n        // Despite what the docs say: 'Emitted when the connection is established and ready-to-use.'\n        // Therefore if the connection has not been set to open when the open event is fired we need to gracefully handle that\n\n        let max = 5;\n        let delayMs = 500;\n        let p = Promise.reject();\n\n        for(var i=0; i<max; i++) {\n            p = p.catch(() => {\n                if (connection.open) {\n                    connection.send(message.serialize());\n                } else {\n                    throw new Error(\"Connection not open yet\");\n                }\n            }).catch(reason => {\n                return new Promise(function(resolve, reject) {\n                    setTimeout(reject.bind(null, reason), delayMs); \n                });\n            });\n        }\n    });\n\n}\n\nConnectionManager.prototype.disconnect = function() {\n\n    this.connections.forEach(c => c.close());\n    this.peer.disconnect();\n\n    this.peer = null;\n    this.connections = new Map();\n    this.playerList = new Map();\n\n    syncMultiplayerStates = true;\n}\n\nvar connectionManager = new ConnectionManager(gameSyncState);\n\n/***************************************/\n/*\n/*  Message Handler\n/*  For handling messages sent once the \n/*  connection is established\n/*\n****************************************/\n\nfunction MessageHandler(manager) {\n    this.connectionManager = manager;\n}\n\nMessageHandler.prototype.onMessage = function (message) {\n\n\n    console.log('Received', message);\n\n    message = Message.prototype.deserialize(message);\n\n    if (message.messageType == MessageType.CLIENT_PLAYER) {\n        this.connectionManager.playerList.set(message.data.peerId, message.data);\n        updatePlayerList();\n        this.connectionManager.sendMessage(new Message(MessageType.PLAYER_LIST, new PlayerList(this.connectionManager.playerList)))\n    } else if (message.messageType == MessageType.PLAYER_LIST) {\n        this.connectionManager.playerList = message.data.playerList;\n        updatePlayerList();\n    } else if (message.messageType == MessageType.UPDATE_SYNC_STATE) {\n        this.connectionManager.syncStateManager.mergeNewRemoteSyncState(message.data)\n    }\n\n}\n\n\n/***************************************/\n/*\n/*  Message Objects\n/*\n****************************************/\n\nfunction Message(type, data, isSending = true) {\n    this.messageType = type;\n    this.data = isSending ? data.serialize() : this.typeToPayload(type, data);\n}\n\nMessage.prototype.typeToPayload = function(type, data) {\n\n    switch(type) {\n        case MessageType.CLIENT_PLAYER     : return Player.prototype.deserialize(data);\n        case MessageType.PLAYER_LIST       : return PlayerList.prototype.deserialize(data);\n        case MessageType.UPDATE_SYNC_STATE : return SyncState.prototype.deserialize(data);\n    }\n\n}\n\nMessage.prototype.deserialize = function(message) {\n    message = JSON.parse(message);\n    return new Message(message.messageType, message.data, false)\n}\n\nMessage.prototype.serialize = function() {\n    return JSON.stringify(this);\n}\n\nconst MessageType = {\n    CLIENT_PLAYER     : 'CLIENT_PLAYER',\n    PLAYER_LIST       : 'PLAYER_LIST',\n    UPDATE_SYNC_STATE : 'UPDATE_SYNC_STATE'\n};\n\nfunction Player(isHost, nickname, peerId) {\n    this.isHost = isHost;\n    this.nickname = nickname;\n    this.peerId = peerId;\n}\n\nPlayer.prototype.serialize = function() {\n    return JSON.stringify(this);\n}\n\nPlayer.prototype.deserialize = function(data) {\n    data = JSON.parse(data);\n    return new Player(data.isHost, data.nickname, data.peerId);\n}\n\nfunction PlayerList(playerList) {\n    this.playerList = playerList;\n}\n\nPlayerList.prototype.serialize = function() {\n    return JSON.stringify(Array.from(this.playerList));\n}\n\nPlayerList.prototype.deserialize = function(data) {\n    data = JSON.parse(data);\n    return new PlayerList(new Map(data));\n}\n\n// Functions for SyncState from EmulationCoreHacks.js\n\nSyncState.prototype.serialize = function() {\n    return JSON.stringify(this);\n}\n\nSyncState.prototype.deserialize = function(data) {\n    data = JSON.parse(data);\n    let syncState = new SyncState();\n\n    syncState.badge1      = data.badge1;\n    syncState.badge2      = data.badge2;\n    syncState.badge3      = data.badge3;\n    syncState.badge4      = data.badge4;\n    syncState.badge5      = data.badge5;\n    syncState.badge6      = data.badge6;\n    syncState.badge7      = data.badge7;\n    syncState.badge8      = data.badge8;\n    syncState.hm01        = data.hm01;\n    syncState.hm02        = data.hm02;\n    syncState.hm03        = data.hm03;\n    syncState.hm04        = data.hm04;\n    syncState.hm05        = data.hm05;\n    syncState.hm06        = data.hm06;\n    syncState.hm07        = data.hm07;\n    syncState.hm08        = data.hm08;\n    syncState.magmaEmblem = data.magmaEmblem;\n    syncState.devonScope  = data.devonScope;\n    syncState.basementKey = data.basementKey;\n    syncState.storeageKey = data.storeageKey;\n    syncState.goGoggles   = data.goGoggles;\n\n    return syncState;\n}\n\n/***************************************/\n/*\n/*  Helper Functions\n/*  mostly for the UI\n/*\n****************************************/\n\n\nfunction connectAsClient() {\n\n    let linkCode = document.getElementById(\"networkLinkCode\").value;\n\n    if (!linkCode) {\n\n        M.toast({html: 'Input Link Code From Host', displayLength:5000});\n        return;\n    }\n\n    document.getElementById(\"networkHost\").classList.add(\"hide\");\n    document.getElementById(\"networkClient\").classList.add(\"hide\");\n    document.getElementById(\"networkNickname\").setAttribute(\"readonly\", \"\");\n    document.getElementById(\"networkLinkCode\").setAttribute(\"readonly\", \"\");\n    document.getElementById(\"networkDisconnect\").classList.remove(\"hide\");\n\n    connectionManager.init(false, document.getElementById(\"networkNickname\").value, (player) => onClientConnectionOpened(linkCode, player));\n}\n\nfunction onClientConnectionOpened(linkCode, player) {\n    connectionManager.connectToHost(linkCode, () => onConnectToHostSuccess(player));\n    updatePlayerList();\n}\n\nfunction onConnectToHostSuccess(player) {\n    connectionManager.sendMessage(new Message(MessageType.CLIENT_PLAYER, player))\n}\n\nfunction connectAsHost() {\n\n    M.toast({html: 'Starting Connection...', displayLength:5000});\n    connectionManager.init(true, document.getElementById(\"networkNickname\").value, onHostConnectionOpened);\n\n    document.getElementById(\"networkHost\").classList.add(\"hide\");\n    document.getElementById(\"networkClient\").classList.add(\"hide\");\n    document.getElementById(\"networkNickname\").setAttribute(\"readonly\", \"\");\n    document.getElementById(\"networkLinkCode\").setAttribute(\"readonly\", \"\");\n    document.getElementById(\"networkDisconnect\").classList.remove(\"hide\");\n\n}\n\nfunction netoworkDisconnect() {\n\n    document.getElementById(\"networkHost\").classList.remove(\"hide\");\n    document.getElementById(\"networkClient\").classList.remove(\"hide\");\n    document.getElementById(\"networkNickname\").removeAttribute(\"readonly\");\n    document.getElementById(\"networkLinkCode\").removeAttribute(\"readonly\");\n    document.getElementById(\"networkDisconnect\").classList.add(\"hide\");\n\n\n    connectionManager.disconnect();\n\n    updatePlayerList();\n}\n\nfunction onHostConnectionOpened(player) {\n\n    document.getElementById(\"networkLinkCode\").value = player.peerId;\n    updatePlayerList();\n\n}\n\nfunction updatePlayerList() {\n\n    let playerListElement = document.getElementById(\"playerList\");\n    playerListElement.innerHTML = \"\";\n\n    connectionManager.playerList.forEach(player => {\n        playerListElement.appendChild(createPlayerTag(player.nickname, player.isHost))\n    });\n    \n}\n\nfunction createPlayerTag(nickname, isHost) {\n\n    let el = document.createElement(\"li\");\n    el.classList.add(\"collection-item\");\n    el.classList.add(\"avatar\");\n    el.classList.add(isHost ? \"host\" : \"client\")\n\n    let backgrounds = ['#A0CDED', '#CDECAD', '#FFFAAE', '#FFC29F', '#F19A9C', '#AF8FC1'];\n\n    let hashNumber = Math.abs(getHash(nickname.toUpperCase())) + 78;\n\n    let bgCol = backgrounds[hashNumber % 6];\n    backgrounds.splice(hashNumber % 6, 1);\n    let bgCol2 = backgrounds[(hashNumber + (hashNumber % 7)) % 5];\n    let shiny = hashNumber % 4069 == 998 ? 'shiny/' : '';\n\n    el.innerHTML = \"<img class='circle'\" + \n                   \" src='https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/\" + shiny + (hashNumber % 1009) + \".png'\" + \n                   \"style='background:\" + \"linear-gradient(197deg, \" + bgCol + '40' + \" 0%, \" + bgCol + '70' + \" 35%, \" + bgCol2 + '96' + \" 100%); transform: scale(1.3);outline: solid 1px \" + bgCol + \";box-shadow: 0 3px 10px rgb(0 0 0 / 41%);'>\" +\n                   \"<span>\" + escapeHtml(nickname) + \"<span>\"  + \n                   \"<p>\" + (isHost ? \"Hosting\" : \"Connected\") + \"</p>\";\n    return el;\n}\n\nvar entityMap = {\n    '&': '&amp;',\n    '<': '&lt;',\n    '>': '&gt;',\n    '\"': '&quot;',\n    \"'\": '&#39;',\n    '/': '&#x2F;',\n    '`': '&#x60;',\n    '=': '&#x3D;'\n  };\n  \nfunction escapeHtml (string) {\n  return String(string).replace(/[&<>\"'`=\\/]/g, function (s) {\n    return entityMap[s];\n  });\n}\n\nfunction toggleLinkCodeVisibility() {\n    let linkCodeElement = document.getElementById(\"networkLinkCode\");\n    linkCodeElement.type = linkCodeElement.type == \"password\" ? \"text\" : \"password\";\n}\n\nfunction copyLinkCodeToClipboard() {\n    let copyText = document.getElementById(\"networkLinkCode\");\n    copyText.select();\n    copyText.setSelectionRange(0, 99999);\n    navigator.clipboard.writeText(copyText.value);\n}\n"],"names":["ConnectionManager","syncStateManager","this","peer","connections","Map","playerList","options","debug","config","iceServers","urls","username","credential","sdpSemantics","messageHandler","MessageHandler","prototype","init","isHost","nickname","callback","connectionManager","_open","reconnect","Peer","manager","on","id","console","log","player","Player","set","connection","attachConnectionHandlers","netoworkDisconnect","syncMultiplayerStates","onUpdateFinished","sendMessage","Message","MessageType","UPDATE_SYNC_STATE","localSyncState","connectToHost","connectionReadyCallback","connectionToHost","connect","data","onMessage","delete","updatePlayerList","PLAYER_LIST","PlayerList","error","message","forEach","async","p","Promise","reject","i","catch","open","Error","send","serialize","reason","resolve","setTimeout","bind","disconnect","c","close","gameSyncState","type","isSending","messageType","typeToPayload","deserialize","CLIENT_PLAYER","peerId","mergeNewRemoteSyncState","SyncState","JSON","parse","stringify","connectAsClient","linkCode","document","getElementById","value","classList","add","setAttribute","remove","onClientConnectionOpened","M","toast","html","displayLength","onConnectToHostSuccess","connectAsHost","onHostConnectionOpened","removeAttribute","playerListElement","innerHTML","appendChild","createPlayerTag","el","createElement","backgrounds","hashNumber","Math","abs","getHash","toUpperCase","bgCol","splice","bgCol2","shiny","escapeHtml","Array","from","syncState","badge1","badge2","badge3","badge4","badge5","badge6","badge7","badge8","hm01","hm02","hm03","hm04","hm05","hm06","hm07","hm08","magmaEmblem","devonScope","basementKey","storeageKey","goGoggles","entityMap","string","String","replace","s","toggleLinkCodeVisibility","linkCodeElement","copyLinkCodeToClipboard","copyText","select","setSelectionRange","navigator","clipboard","writeText"],"version":3,"file":"build-index.25c7ccac.js.map"}