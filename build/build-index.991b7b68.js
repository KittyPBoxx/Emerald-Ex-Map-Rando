function ConnectionManager(e){this.peer=null,this.connections=new Map,this.playerList=new Map,this.options={debug:0,config:{iceServers:[{urls:"stun:stun.l.google.com:19302"},{urls:"turn:0.peerjs.com:3478",username:"peerjs",credential:"peerjsp"}],sdpSemantics:"unified-plan"}},this.messageHandler=new MessageHandler(this),this.syncStateManager=e}ConnectionManager.prototype.init=function(e,n,t){if(this.peer&&connectionManager.peer._open)return;if(this.peer)return void this.peer.reconnect();this.peer=new Peer(this.options);let o=this;this.peer.on("open",(function(a){console.log("Peer ID is: "+a);let s=new Player(e,n,a);o.playerList.set(a,s),t(s)})),this.peer.on("connection",(function(e){o.connections.set(e.peer,e),o.attachConnectionHandlers(e)})),syncMultiplayerStates=!0;let a=this.syncStateManager;a.onUpdateFinished=function(){o.sendMessage(new Message(MessageType.UPDATE_SYNC_STATE,a.localSyncState))}},ConnectionManager.prototype.connectToHost=function(e,n){let t=this.peer.connect(e);this.connections.set(e,t),this.attachConnectionHandlers(t),t.on("open",n)},ConnectionManager.prototype.attachConnectionHandlers=function(e){let n=this;e.on("data",(function(e){n.messageHandler.onMessage(e)})),e.on("close",(function(e){console.log(e)})),e.on("error",(function(e){console.log(e)}))},ConnectionManager.prototype.sendMessage=function(e){connectionManager.connections.forEach((async(n,t)=>{let o=Promise.reject();for(var a=0;a<5;a++)o=o.catch((()=>{if(!n.open)throw new Error("Connection not open yet");n.send(e.serialize())})).catch((e=>new Promise((function(n,t){setTimeout(t.bind(null,e),500)}))))}))};var connectionManager=new ConnectionManager(gameSyncState);function MessageHandler(e){this.connectionManager=e}function Message(e,n,t=!0){this.messageType=e,this.data=t?n.serialize():this.typeToPayload(e,n)}MessageHandler.prototype.onMessage=function(e){console.log("Received",e),(e=Message.prototype.deserialize(e)).messageType==MessageType.CLIENT_PLAYER?(this.connectionManager.playerList.set(e.data.peerId,e.data),updatePlayerList(),this.connectionManager.sendMessage(new Message(MessageType.PLAYER_LIST,new PlayerList(this.connectionManager.playerList)))):e.messageType==MessageType.PLAYER_LIST?(this.connectionManager.playerList=e.data.playerList,updatePlayerList()):e.messageType==MessageType.UPDATE_SYNC_STATE&&this.connectionManager.syncStateManager.mergeNewRemoteSyncState(e.data)},Message.prototype.typeToPayload=function(e,n){switch(e){case MessageType.CLIENT_PLAYER:return Player.prototype.deserialize(n);case MessageType.PLAYER_LIST:return PlayerList.prototype.deserialize(n);case MessageType.UPDATE_SYNC_STATE:return SyncState.prototype.deserialize(n)}},Message.prototype.deserialize=function(e){return new Message((e=JSON.parse(e)).messageType,e.data,!1)},Message.prototype.serialize=function(){return JSON.stringify(this)};const MessageType={CLIENT_PLAYER:"CLIENT_PLAYER",PLAYER_LIST:"PLAYER_LIST",UPDATE_SYNC_STATE:"UPDATE_SYNC_STATE"};function Player(e,n,t){this.isHost=e,this.nickname=n,this.peerId=t}function PlayerList(e){this.playerList=e}function connectAsClient(){let e=document.getElementById("networkLinkCode").value;e||M.toast({html:"Input Link Code From Host",displayLength:5e3}),connectionManager.init(!1,document.getElementById("networkNickname").value,(n=>onClientConnectionOpened(e,n)))}function onClientConnectionOpened(e,n){connectionManager.connectToHost(e,(()=>onConnectToHostSuccess(n))),updatePlayerList()}function onConnectToHostSuccess(e){connectionManager.sendMessage(new Message(MessageType.CLIENT_PLAYER,e))}function connectAsHost(){M.toast({html:"Starting Connection...",displayLength:5e3}),connectionManager.init(!0,document.getElementById("networkNickname").value,onHostConnectionOpened)}function onHostConnectionOpened(e){document.getElementById("networkLinkCode").value=e.peerId,updatePlayerList()}function updatePlayerList(){let e=document.getElementById("playerList");e.innerHTML="",connectionManager.playerList.forEach((n=>{e.appendChild(createPlayerTag(n.nickname,n.isHost))}))}function createPlayerTag(e,n){let t=document.createElement("li");t.classList.add("collection-item"),t.classList.add("avatar"),t.classList.add(n?"host":"client");let o=["#A0CDED","#CDECAD","#FFFAAE","#FFC29F","#F19A9C","#AF8FC1"],a=Math.abs(getHash(e.toUpperCase()))+78,s=o[a%6];o.splice(a%6,1);let i=o[(a+a%7)%5],r=a%4069==998?"shiny/":"";return t.innerHTML="<img class='circle' src='https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/"+r+a%1009+".png'style='background:linear-gradient(197deg, "+s+"40 0%, "+s+"70 35%, "+i+"96 100%); transform: scale(1.3);outline: solid 1px "+s+";box-shadow: 0 3px 10px rgb(0 0 0 / 41%);'><span>"+e+"<span><p>"+(n?"Hosting":"Connected")+"</p>",t}function toggleLinkCodeVisibility(){let e=document.getElementById("networkLinkCode");e.type="password"==e.type?"text":"password"}function copyLinkCodeToClipboard(){let e=document.getElementById("networkLinkCode");e.select(),e.setSelectionRange(0,99999),navigator.clipboard.writeText(e.value)}Player.prototype.serialize=function(){return JSON.stringify(this)},Player.prototype.deserialize=function(e){return new Player((e=JSON.parse(e)).isHost,e.nickname,e.peerId)},PlayerList.prototype.serialize=function(){return JSON.stringify(Array.from(this.playerList))},PlayerList.prototype.deserialize=function(e){return e=JSON.parse(e),new PlayerList(new Map(e))},SyncState.prototype.serialize=function(){return JSON.stringify(this)},SyncState.prototype.deserialize=function(e){e=JSON.parse(e);let n=new SyncState;return n.badge1=e.badge1,n.badge2=e.badge2,n.badge3=e.badge3,n.badge4=e.badge4,n.badge5=e.badge5,n.badge6=e.badge6,n.badge7=e.badge7,n.badge8=e.badge8,n.hm01=e.hm01,n.hm02=e.hm02,n.hm03=e.hm03,n.hm04=e.hm04,n.hm05=e.hm05,n.hm06=e.hm06,n.hm07=e.hm07,n.hm08=e.hm08,n.magmaEmblem=e.magmaEmblem,n.devonScope=e.devonScope,n.basementKey=e.basementKey,n.storeageKey=e.storeageKey,n.goGoggles=e.goGoggles,n};
//# sourceMappingURL=build-index.991b7b68.js.map
