{"mappings":"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","sources":["dist/Randomiser/Randomisation.js"],"sourcesContent":["var mixedGameData = {};\nObject.entries(EMERALD_WARPS).forEach(e => mixedGameData[e[0]] = e[1]);\n\nvar remappingsData = {};\nvar isHeadless = true;\n\n// WarpList used by EmulationCoreHacks.js\nvar warpList = new Map();\n\nfunction getMapData() {\n    return mixedGameData;\n}\n\nfunction getRandomisationAlgorithm() {\n    return generateRandomMappings;\n}\n\nfunction getRandomisationConfig() {\n    let config = {};\n    config.hoennLevel = document.getElementById(\"hoennLevel\").value;\n    return config;\n}\n\nfunction getFlagData() {\n  return FLAG_DATA;\n}\n\nfunction getEscapePaths() {\n  return EMERALD_ESCAPE_PATHS;\n}\n\nfunction mappingToWarps(mappingData) {\n    let mappedList = new Map();\n\n    mappingData.forEach(mapping => {\n        let from = mapping.trigger;\n        let to = mapping.target;\n        let toParts = to.split(\",\");\n        mappedList.set(from, new PKWarp(from, toParts[0], toParts[1], toParts[2], toParts[3], mapping.source));\n    });\n\n    return mappedList;\n}\n\nasync function mapWarps(seed) {\n\n    flagsState = {};\n    unaddedConditionalEdges = {};\n\n    let config = getRandomisationConfig();\n    let mapData = getFilteredData();\n    let flagData = getFlagData();\n    let escapePaths = getEscapePaths();\n    remappingsData = getRandomisationAlgorithm().apply(null, [seed, mapData, flagData, config, escapePaths]);\n    warpList = mappingToWarps(getAugmetedRemappingData(remappingsData));\n    updateHashDisplay();\n\n    if (typeof storageManager !== 'undefined') {\n      storageManager.persist(\"RANDOM_MAPPING\", new WarpListData(seed, config, warpList));\n    }\n}\n\nfunction generateRandomMappings(seed, mapData, flagData, config, escapePaths) {\n    \n    let rng = new RNG(getHash(seed));\n    let progressionState = initMappingGraph(mapData, isHeadless, new ProgressionState(flagData, config))\n\n    progressionState = generateEscapeWarps(escapePaths, mapData, rng, progressionState);\n\n    var root = getInitialWarp(config);\n\n    progressionState.unconnectedComponents = progressionState.unconnectedComponents.filter(a => !a.includes(root));\n\n    var moreWarpsToMap = true;\n    while(moreWarpsToMap) {\n        try {\n          moreWarpsToMap = doNextMapping(rng, root, progressionState);\n        } catch (e) {\n          console.error(\"An error occured mapping warps \" + e);\n          M.toast({html: 'ERROR: Error assigning valid connections.<BR> Please try a different seed or config', displayLength:10000});\n          moreWarpsToMap = false;\n        }\n        progressionState = updateProgressionState(progressionState, root);\n    }\n\n   return getBaseRemappingData();\n}\n\nfunction getInitialWarp(config) {\n  return KEY_LOCATION_DATA[\"OLDALE TOWN\"];\n}\n\nfunction filterIgnored(mapData) {\n    return new Map([...mapData].filter(k => !k[1].ignore));\n}\n\nfunction filterByConfig(usabledWarps, config) {\n    usabledWarps = new Map([...usabledWarps].filter(w => {\n        let filterLevel = null;\n        if (w[0][0] == \"E\") {\n            filterLevel = config.hoennLevel;\n        } else if (w[0][0] == \"F\") {\n            filterLevel = config.kantoLevel;\n        } else if (w[0][0] == \"C\") {\n            filterLevel = config.johtoLevel;\n        }\n\n        return usabledWarps.get(w[0]).level && (+usabledWarps.get(w[0]).level <= +filterLevel);\n    }));\n    return usabledWarps;\n}\n\nfunction generateEscapeWarps(escapePaths, mapData, rng, progressionState) {\n  let filteredWarpIds = new Set(mapData.keys());\n  let escapeCandidateSet = escapePaths.map(s => s.filter(n => filteredWarpIds.has(n))).filter(s => s.length > 0);\n  let randomMustLinkHomeWarps = escapeCandidateSet.flatMap(s => s[rng.nextRange(0, s.length - 1)]);\n  progressionState.randomMustLinkHomeWarps = randomMustLinkHomeWarps;\n  return progressionState;\n}\n\nfunction filteGroupedNotMain(mapData) {\n    return new Map([...mapData].filter(k => k[1].groupMain || !k[1].grouped));\n} \n\nfunction removeRemovableLocations(mapData) {\n  return new Map([...mapData].filter(n => !(n[1].tags && n[1].tags.includes(\"removeable\"))));\n}\n\nfunction toMapBank(s) { \n    let arr = s.split(\",\"); \n    return arr[0] + \",\" + arr[1] + \",\" + arr[2] \n}\n\nfunction ProgressionState(flagData, config) {\n  this.remainingConditionalEdges = new Set();\n  this.flags = new Set();\n  this.flagData = flagData;\n  this.config = config;\n  // Locations that may grant further progress\n  this.unmarkedLocations = new Map(Object.entries(flagData.LOCATIONS_TRIGGER));\n  this.unmarkedFlags = new Map(Object.entries(flagData.COMPOSITE_FLAGS));\n  // Locations that will not grant progress but should be included anyway\n  this.unmarkedKeyLocations = new Map(Object.entries(flagData.KEY_LOCATIONS))\n}\n\nProgressionState.prototype.makeFinalLocationsKey = function (config) {\n\n  let finalLocations = [];\n\n  switch(this.config.hoennLevel) {\n    case \"1\": finalLocations.push(HINTABLE_LOCATIONS[\"ROXANNE\"])      ; break;\n    case \"2\": finalLocations.push(HINTABLE_LOCATIONS[\"BRAWLY\"])       ; break;\n    case \"3\": finalLocations.push(HINTABLE_LOCATIONS[\"WATTSON\"])      ; break; \n    case \"4\": finalLocations.push(HINTABLE_LOCATIONS[\"FLANNERY\"])     ; break;\n    case \"5\": finalLocations.push(HINTABLE_LOCATIONS[\"NORMAN\"])       ; break;\n    case \"6\": finalLocations.push(HINTABLE_LOCATIONS[\"WINONA\"])       ; break;\n    case \"7\": finalLocations.push(HINTABLE_LOCATIONS[\"TATE AND LIZA\"]); break;\n    case \"8\": finalLocations.push(HINTABLE_LOCATIONS[\"JUAN\"])         ; break;\n    case \"9\": \n    case \"0\": \n    case \"10\": \n    default:\n      // E4 and upwards are key locations not progression anyway  \n      break;\n  }\n\n  finalLocations.forEach(l => {\n    if (this.unmarkedLocations.has(l)) {\n      this.unmarkedKeyLocations.set(l, this.unmarkedLocations.get(l))\n      this.unmarkedLocations.delete(l);\n    }\n  })\n\n}\n\n/** \n *  Warp data model\n */\nfunction WarpListData(seed, config, warpList) {\n  this.warpList = Array.from(warpList.entries());\n  this.seed = seed;\n  this.config = config;\n} \n\nfunction exportMapping() {\n  storageManager.find(\"RANDOM_MAPPING\").then(s => {\n      let data = JSON.stringify(s);\n      let file = new File([data], \"WarpMapping.json\", {type: \"application/json;charset=utf-8\"});\n      saveAs(file);\n  });\n}\n\nfunction importMapping() {\n  let file = this.files[0];\n\n  let reader = new FileReader();\n  reader.readAsText(file,'UTF-8');\n\n  reader.onload = readerEvent => {\n      let content = readerEvent.target.result;\n      let warpListData = JSON.parse(content);\n      updateWarpListData(warpListData);\n      storageManager.persist(\"RANDOM_MAPPING\", warpListData);\n   }\n}\n\nfunction updateWarpListData(warpListData) {\n  document.getElementById(\"input_seed_text\").value = warpListData.seed;\n\n  document.getElementById(\"hoennLevel\").value = warpListData.config.hoennLevel;\n  M.FormSelect.getInstance(document.getElementById(\"hoennLevel\"))._handleSelectChangeBound();\n\n  warpList = new Map(warpListData.warpList);\n  updateHashDisplay();\n}\n\nfunction updateHashDisplay() {\n  document.getElementById(\"hashText\").innerHTML = \"CHECK: \" + Math.abs(getHash(JSON.stringify(Array.from(warpList)))).toString(16).toUpperCase();\n}\n\n/**\n *  Warp Script model \n */\n function PKWarp(trigger, romCode, bank, map, warpNo, source) {\n    this.trigger = trigger;\n    this.toRomCode = romCode;\n    this.toBank = bank;\n    this.toMap = map;\n    this.toWarpNo = warpNo;\n    this.source = source;\n}\n\n/**\n *  SEEDED RNG MANAGEMENT\n */\n\nfunction getHash(input){\n    var hash = 0, len = input.length;\n    for (var i = 0; i < len; i++) {\n      hash  = ((hash << 5) - hash) + input.charCodeAt(i);\n      hash |= 0; // to 32bit integer\n    }\n    return hash;\n}\n\nfunction RNG(seed) {\n    // LCG using GCC's constants\n    this.m = 0x80000000; // 2**31;\n    this.a = 1103515245;\n    this.c = 12345;\n  \n    this.state = seed ? seed : Math.floor(Math.random() * (this.m - 1));\n}\nRNG.prototype.nextInt = function() {\n  this.state = (this.a * this.state + this.c) % this.m;\n  return this.state;\n}\nRNG.prototype.nextFloat = function() {\n  // returns in range [0,1]\n  return this.nextInt() / (this.m - 1);\n}\nRNG.prototype.nextRange = function(start, end) {\n  // returns in range [start, end): including start, excluding end\n  // can't modulu nextInt because of weak randomness in lower bits\n  var rangeSize = end - start;\n  var randomUnder1 = this.nextInt() / this.m;\n  return Math.abs(start + Math.floor(randomUnder1 * rangeSize));\n}\nRNG.prototype.choice = function(array) {\n  return array[this.nextRange(0, array.length)];\n}\n\n/**\n *  GRAPHING / CONNECTION MANAGEMENT\n */\n\n function ReigonNode(id) {\n    this.data = {};\n    this.data.id = id;\n    this.classes = 'reigon';\n}\n\nfunction AreaNode(node) {\n    this.data = {};\n    this.data.id = toMapBank(node[0]);\n    this.data.isMap = true;\n    this.data.parent = toReigon(node[0]);\n    this.data.label = node[0] + \" (\" + node[1].name.split(\"-\")[0] + \"- \" + node[1].name.split(\"-\")[1].trim() + \")\";\n}\n\nfunction WarpNode(data) {\n    this.data = {};\n    this.data.id = data[0];\n    this.data.parent = toMapBank(data[0]);\n    this.data.label = data[1].name ? data[0] + data[1].name.split(\"-\")[2] : data[0] + \" (Unnamed)\";\n    this.classes = 'outline';\n    this.data.isWarp = true;\n    this.data.isMapped = false;\n    this.data.needsReturn = data[1].tags && data[1].tags.includes(\"needs_return\");\n    this.data.noReturn = data[1].tags && data[1].tags.includes(\"no_return\");\n    this.data.lowPriority = data[1].tags && data[1].tags.includes(\"low_priority\");\n    this.data.hasMultipleConnections = data[1].connections ? Object.values(data[1].connections).filter(n => n == true).length > 0 : false;\n}\n\nfunction FixedEdge(source, target) {\n    this.data = {};\n    this.data.id = source + \"->\" + target;\n    this.data.source = source;\n    this.data.target = target;\n    this.classes = 'fixed';\n}\n\nfunction CondidtionalEdge(source, target, condition) {\n  this.data = {};\n  this.data.id = source + \"->\" + target;\n  this.data.source = source;\n  this.data.target = target;\n  this.classes = 'conditional';\n  this.condition = condition;\n}\n\nfunction WarpEdge(source, target, count) {\n  this.data = {};\n  this.data.id = source + \"->\" + target + \"#\" + window.cy.getElementById(source + \"->\" + target).length;\n  this.data.source = source;\n  this.data.target = target;\n  this.data.isWarp = true;\n  this.classes = 'warp';\n}\n\nfunction getAugmetedRemappingData(remappingData) {\n\n  remappingData = addGroupedMappings(remappingData);\n  remappingData = addTriggerData(remappingData);\n\n  return remappingData;\n}\n\nfunction addGroupedMappings(remappingData) {\n  \n  let groupMappings = [];\n\n  remappingData.forEach(m => {\n    let groups = getMapData()[m.source].grouped;\n    if (groups) {\n      groups.forEach(g => {\n        groupMappings.push({source: g, target: m.target});\n      });\n    }\n  })\n\n  return [...remappingData, ...groupMappings];\n}\n\nfunction addTriggerData(remappingData) {\n\n  return remappingData.map(m => {\n    m.trigger = getMapData()[m.source].to;\n    return m;\n  });\n\n}\n\nfunction getBaseRemappingData() {\n  return cy.edges().filter(e => e.data().isWarp).map(e => { return {source: e.data().source, target: e.data().target} });\n}\n\nfunction getFilteredData() {\n    let warpIdData = new Map(Object.entries(getMapData()));\n    warpIdData = filterIgnored(warpIdData);\n    warpIdData = filteGroupedNotMain(warpIdData);\n    warpIdData = filterByConfig(warpIdData, getRandomisationConfig());\n\n    // In future this could be config. Remove some deadends that litterally only have dialog to speed things up\n    warpIdData = removeRemovableLocations(warpIdData);\n\n    return warpIdData;\n}\n\nfunction toReigon(id) {\n  return 'HOENN'\n}\n\nfunction findAccessibleUnmappedNodes(cy, root) {\n  let nodeSet = new Set();\n  cy.elements().bfs({roots: cy.getElementById(root), directed: true, visit: (v, e, u, i, depth) => {\n    \n    if(!v.data().isMapped) {\n      nodeSet.add(v)\n    }\n\n  }});\n  return nodeSet;\n}\n\n/**\n * TLDR How the mapping works\n * \n * TERMS:\n * Components - a set of warps that could be connected. \n *              If you can get from one door to another without going through a door then they are in the same component\n *              i.e All the warps in SLATEPORT + DEWFORD + PETALBURG e.t.c are one component because you could surf between them\n * Node       - A warp tile / warp tile group (i.e for when you have a double door)\n * Hub        - A group of nodes where the dones have at least on connection\n * Deadend    - A node where the node only has one connection\n * Connection - A path from one node to another without going through a warp\n * Conditional Connection - A path from one node to another that is only avaiable when certain game conditions have been met\n * Flag Locations - A location that, by itself or with other locations, will allow a conditional connection to be available  \n * Key Locations  - locations that are importaint but unlock any conditional connections e.g the champion battle\n * Escape Warps   - A single node (or single random node from a set of nodes) where access is directional\n *                These warps eventually have to lead back home to the root node (In Oldale)\n *                e.g   a node after a ledge hop where you can't get back.\n *                e.g.2 one of the warps in Dewford has to be an escape warp in case you whiteout to there\n * \n * Each time we do a mapping we search the graph for the nodes that can be accessed but have not been linked to another node yet.\n * \n * 1. Start by mapping one node from each of the components. Until we can reach at least one place in every component\n * 2. Build a list of all the warps that can access the root node without traversing conditional connections and link an escape warps to them (until there are no more escape warps)\n * 3. Randomly add flag locations to the free nodes. Each time we add a flag check if any conditional connections are now available and update available warps\n * 4. Add a node from any hubs that still can't be reached (probably only the case if there is a one way path in a component) (after this only dead ends are left)\n * 5. Randomly add all the key locations (if a key loacation is not a dead end it will have already been added)\n * 6. Randomly add the rest of the dead ends\n * 7. Link up any remaning unmapped nodes to each other (if there is an odd number we link the final warp to the ice secion in shoal cave, otherwise the cave is left out)   \n *\n * NB: Some teleport tile nodes needed to be walked over for the player to access another area / item\n *     In these special cases we have to make sure that they don't link to a one-way \n */\nfunction doNextMapping(rng, root, progressionState) {\n    let accessibleNodes = progressionState.cachedNodes ? progressionState.cachedNodes : findAccessibleUnmappedNodes(window.cy, root);\n    let inacessibleNodes = cy.nodes().not(accessibleNodes).filter(e => e.data().isWarp && !e.data().isMapped);\n    let inaccesibleFlagLocations = inacessibleNodes.filter(n => progressionState.unmarkedLocations.has(n.data().id));\n    let inaccesibleKeyLocations = inacessibleNodes.filter(n => progressionState.unmarkedLocations.has(n.data().id));\n\n    if(accessibleNodes.size == 0 && inacessibleNodes.length == 0) { \n      return false; \n    } else if (accessibleNodes.size == 0 && (inaccesibleFlagLocations.length > 0 || inaccesibleKeyLocations.length > 0)) {\n\n      M.toast({html: 'ERROR: At least 1 importaint location was detected to be inaccessible. <BR>' +  \n                     'It may be impossible to complete this seed <BR> ' +\n                     'Please try a different seed or config', displayLength:10000});\n      return false;\n\n    } else if (accessibleNodes.size == 0 && inacessibleNodes.filter(n => !n.data().lowPriority) > 0) {\n\n      console.warn(\"Had to leave some dead ends unimportant inaccessible\");\n      M.toast({html: 'WARNING: Some checks could not be completed' + \n                     '<BR> This seed should still be possible but is not recommended', displayLength:10000});\n      return false;\n\n    }\n\n    // To make the game more playable we want to certain warps have path that lead back to the start\n    if (progressionState.randomMustLinkHomeWarps.length > 0) {\n      let preferedList = Array.from(accessibleNodes).filter(n => !progressionState.randomMustLinkHomeWarps.includes(n.data().id));\n\n      // If the accessible nodes only include the ones we want for escapes there's nothing we can do otherwise we can filter them from the list\n      if (preferedList.length > 0) {\n        accessibleNodes = new Set(preferedList);\n      } else {\n        // We can't use the prefered node list so we have to clear the list\n        progressionState.randomMustLinkHomeWarps = [];\n      }\n    }\n\n    let warp1 = null;\n    let warp2 = null;\n    let shouldCacheNodes = false;\n    let inacessibleHubs = inacessibleNodes.filter(e => e.degree(true) > 0);\n\n    if (progressionState.unconnectedComponents.length > 0) {\n\n      // This is a hack to work around a bug where the first element was never getting connected till the end\n      if (rng.nextRange(0, 5) == 0) {\n        warp1 = [...accessibleNodes][0]\n      } else {\n        warp1 = [...accessibleNodes][rng.nextRange(0, accessibleNodes.size - 1)];\n      }\n      \n      accessibleNodes.delete(warp1);\n\n      // Add a node from every component of the graph (with the assumption no warps are present but all flags are met)\n      // however avoid joining on 'escape' warps that would be needed to avoid self soft lock (e.g only warp after going down a ledge)\n      // Techically this could cause an issue with hubs that allow flags by themself but that's only meteor falls\n\n      let candidateUnconnectedComponentNodes = progressionState.unconnectedComponents.flat();\n\n      let preferedcandidateUnconnectedComponentNodes = candidateUnconnectedComponentNodes.filter(n => !progressionState.randomMustLinkHomeWarps.includes(n));\n      if (preferedcandidateUnconnectedComponentNodes.length > 0) {\n        candidateUnconnectedComponentNodes = preferedcandidateUnconnectedComponentNodes;\n      } else {\n        console.warn(\"Clearing must link home warps even though some were not satisfied\");\n        progressionState.randomMustLinkHomeWarps = [];\n      }\n\n      let randomNodeIdFromComponent = selectRandomWarp(rng, candidateUnconnectedComponentNodes, warp1);\n\n      warp2 = cy.getElementById(randomNodeIdFromComponent);\n      progressionState.unconnectedComponents = progressionState.unconnectedComponents.filter(c => !c.includes(randomNodeIdFromComponent));\n\n      console.log(\"HUBS\")\n\n    } else if (progressionState.randomMustLinkHomeWarps.length > 0 && accessibleNodes.size > 1) {\n\n      let warp1Candidates = cy.nodes().filter(n => !n.data().isMapped && progressionState.randomMustLinkHomeWarps.includes(n.data().id));\n\n      if (warp1Candidates.length > 0) {\n        warp1 = [...warp1Candidates][rng.nextRange(0, warp1Candidates.length - 1)];\n      } else {\n        warp1 = [...accessibleNodes][rng.nextRange(0, accessibleNodes.size - 1)];\n        console.warn(\"Clearing must link home warps even though some were not satisfied\");\n        progressionState.randomMustLinkHomeWarps = [];\n      }\n\n      accessibleNodes.delete(warp1);\n      \n      // Find all the nodes that have a path back to home and make sure the escape warps link back to them \n      let preferedCandidateList = null;\n      if (progressionState.homeEscapesList) {\n\n        preferedCandidateList = progressionState.homeEscapesList;\n\n      } else {\n\n        let fw = cy.elements().floydWarshall({directed : true});\n        progressionState.homeEscapesList = Array.from(accessibleNodes).filter(n => fw.distance(cy.getElementById(root), n) != \"Infinity\")\n        preferedCandidateList = progressionState.homeEscapesList;\n\n        // None of the nodes in the the randomMustLinkHomeWarps should already be mapped. \n        // However some may be in the homeEscapesList. In which case we can remove them (because they already link back home)\n        progressionState.homeEscapesList.forEach(n => {\n          if (progressionState.randomMustLinkHomeWarps.includes(n.data().id)) {\n            progressionState.randomMustLinkHomeWarps.splice(progressionState.randomMustLinkHomeWarps.indexOf(n.data().id), 1);\n          }\n        })\n      }\n\n      // Don't error if we've run out of warps that link back\n      preferedCandidateList = preferedCandidateList.length == 0 ? accessibleNodes : preferedCandidateList;\n      warp2 = selectRandomWarp(rng, preferedCandidateList, warp1);\n\n\n      accessibleNodes.delete(warp2);\n      progressionState.randomMustLinkHomeWarps.splice(progressionState.randomMustLinkHomeWarps.indexOf(warp1.data().id), 1);\n      progressionState.homeEscapesList = (progressionState.homeEscapesList.filter(n => n.data().id != warp2.data().id));\n\n      console.log(\"HOME LINKS\")\n\n    } else if (inaccesibleFlagLocations.length > 0) { \n\n      warp1 = [...accessibleNodes][rng.nextRange(0, accessibleNodes.size - 1)];\n      accessibleNodes.delete(warp1);\n\n      // Add inacessible dead-ends that might allow flags givinb access to new locations\n      warp2 = selectRandomWarp(rng, inaccesibleFlagLocations, warp1);\n      warp2.addClass(\"significant\");\n\n      console.log(\"FLAGS\")\n\n    } else if (inacessibleHubs.length > 0) {\n\n      warp1 = [...accessibleNodes][rng.nextRange(0, accessibleNodes.size - 1)];\n      accessibleNodes.delete(warp1);\n\n      // Add any hubs that there is still no access to... I'm not sure there would even be any left...\n      inacessibleNodes = inacessibleNodes.filter(e => e.degree(true) > 0);\n      warp2 = selectRandomWarp(rng, inacessibleNodes, warp1);\n\n      console.log(\"MORE HUBS\")\n\n    } else if (inaccesibleKeyLocations.length > 0) {\n\n      warp1 = [...accessibleNodes][rng.nextRange(0, accessibleNodes.size - 1)];\n      accessibleNodes.delete(warp1);\n\n      // Add key inacessible locations \n      warp2 = selectRandomWarp(rng, inaccesibleKeyLocations, warp1); \n      shouldCacheNodes = true;\n      accessibleNodes.delete(warp2);\n      warp2.addClass(\"significant\");\n\n      console.log(\"KEY LOCATIONS\")\n\n    } else if (inacessibleNodes.length > 0) {\n\n      // Add deadends that are not tagged as lowPriority first to ensure \n      // even if there arn't enough connections we make it as nice as possible\n\n      warp1 = [...accessibleNodes][rng.nextRange(0, accessibleNodes.size - 1)];\n      accessibleNodes.delete(warp1);\n\n      // Add other inacessible dead-ends \n\n      let priorityInaccessibleNodes = inacessibleNodes.filter(n => !n.data().lowPriority);\n\n      if (priorityInaccessibleNodes.length > 0) {\n        warp2 = selectRandomWarp(rng, priorityInaccessibleNodes, warp1); \n      } else {\n        warp2 = selectRandomWarp(rng, inacessibleNodes, warp1); \n      }\n\n      shouldCacheNodes = true;\n      accessibleNodes.delete(warp2);\n\n      console.log(\"DEADENDS\");\n\n    } else if (accessibleNodes.size > 1) {\n\n      warp1 = [...accessibleNodes][rng.nextRange(0, accessibleNodes.size - 1)];\n      accessibleNodes.delete(warp1);\n\n      // map together nodes that are already accessible\n      warp2 = selectRandomWarp(rng, [...accessibleNodes], warp1);\n      shouldCacheNodes = true;\n      accessibleNodes.delete(warp2);\n\n      console.log(\"MORE CONNECTIONS\");\n\n    } else {\n\n      warp1 = [...accessibleNodes][rng.nextRange(0, accessibleNodes.size - 1)];\n      accessibleNodes.delete(warp1);\n\n      //console.warn(\"Unevenly matched warps. \" + warp1.data().id + \" had to map to itself\");\n      // warp2 = warp1\n      \n      // if one warp is left hanging we connect it to a random odd-one-out location\n      // Shoal Cave, Frontier Mart, Sothern Island, Dessert Underpass, Sealed Chamber\n      let oddOneOutLocation = ['E,24,83,0', 'E,26,10,0', 'E,26,55,0', 'E,24,98,0', 'E,24,72,0', \"E,25,43,11\", \"E,25,42,0\"][rng.nextRange(0, 7 - 1)];\n      warp2 = cy.add(new WarpNode([oddOneOutLocation, getMapData()[oddOneOutLocation]]));\n      shouldCacheNodes = true;\n      accessibleNodes.delete(warp2);\n\n    }\n\n\n    // TODO: CACHE IS CAUSING ISSUES WITH NEW ALGORITHM SO IT'S BEEN DISABLED FOR NOW\n\n    // Once it's only dead ends left we can cache which nodes are accessible from the root \n    // if (shouldCacheNodes && !progressionState.cachedNodes) {\n    //     progressionState.cachedNodes = accessibleNodes;\n    // }\n\n    if (!warp1) {\n      \n      if (accessibleNodes.size != 0) {\n        console.log(\"Some accessible nodes were left:\")\n        accessibleNodes.forEach(n => {\n          console.log(n.data().id)\n        })\n      } else {\n        console.log(\"All accesible nodes mapped\")\n      }\n\n      if (inacessibleNodes.size != 0) {\n        console.log(\"Some inaccessible nodes were left:\")\n        inacessibleNodes.forEach(n => {\n          console.log(n.data().id)\n        })\n\n        warp2.data().isMapped = true;\n        return false;\n\n      } else {\n        console.log(\"All inaccesible nodes mapped\")\n      }\n\n    }\n\n    window.cy.add(new WarpEdge(warp1.data().id, warp2.data().id))\n\n    if (warp1 != warp2) {\n          window.cy.add(new WarpEdge(warp2.data().id, warp1.data().id))\n    }\n    \n\n    if (warp1.data().isMapped) {\n      throw new Error(warp1.data().id + \" (warp1) is already mapped. We shouldn't be trying to remap it\")\n    }\n\n    if (warp2.data().isMapped) {\n      throw new Error(warp2.data().id + \" (warp2) is already mapped. We shouldn't be trying to remap it\")\n    }\n\n    warp1.data().isMapped = true;\n    warp2.data().isMapped = true;\n\n    return true;\n}\n\nfunction selectRandomWarp(rng, listOfWarps, connectingWarp) {\n\n    // Some warps do not allow bi-directional travel \n    // Some warps need to be accessible in reverse not to block map access. i.e a warp tile you have to walk over to get somewhere\n    // We need to make sure those don't get matched together\n    let warpNeedsReturn = connectingWarp.data().needsReturn;\n    let warpNoReturn = connectingWarp.data().noReturn;\n\n    if (warpNeedsReturn) {\n      listOfWarps = listOfWarps.filter(w => {\n        return typeof w === 'string' ? !cy.getElementById(w).data().noReturn : !w.data().noReturn;\n      });\n    } else if (warpNoReturn) {\n      listOfWarps = listOfWarps.filter(w => {\n        return typeof w === 'string' ? !cy.getElementById(w).data().needsReturn : !w.data().needsReturn;\n      });\n    }\n\n    if (listOfWarps.length == 0) {\n      M.toast({html: 'ERROR: Progression logic could not be verified.<BR> Please try a different seed', displayLength:5000});\n    }\n\n    return listOfWarps[rng.nextRange(0, listOfWarps.length - 1)];\n}\n\n\nfunction updateProgressionState(updateProgressionState, root) {\n\n  let currentNodes = new Set();\n  cy.elements().bfs({roots: cy.getElementById(root), directed: true, visit: (v, e, u, i, depth) => { \n    currentNodes.add(v.data().id) \n  }});\n\n  updateProgressionState.unmarkedLocations.forEach((name, location) => {\n    if (currentNodes.has(location)) {\n      updateProgressionState.unmarkedLocations.delete(location);\n      updateProgressionState.flags.add(name);\n    }\n  });\n\n  updateProgressionState.unmarkedFlags.forEach(n => {\n    if (n.condition.every(flag => updateProgressionState.flags.has(flag))) {\n      updateProgressionState.flags.add(n.flag);\n      updateProgressionState.unmarkedFlags.delete(n.flag)\n    }\n  });\n\n  let conditionalEdges = updateProgressionState.remainingConditionalEdges;\n  conditionalEdges.forEach(e => {\n    if (updateProgressionState.flags.has(e.condition)) {\n      if (cy.getElementById(e.data.target).length > 0 && cy.getElementById(e.data.source).length > 0) {\n        cy.add(e);\n      }\n      conditionalEdges.delete(e);\n    }\n  });\n\n  return updateProgressionState;\n}\n\nfunction initMappingGraph(mapData, isHeadless, progressionState) {\n\n  var cy = window.cy = cytoscape({\n      container: isHeadless ? null : document.getElementById('cy'),\n      headless: isHeadless,\n      styleEnabled: !isHeadless,\n      boxSelectionEnabled: false,\n      textureOnViewport: true,\n    \n      style: [\n        {\n          selector: 'node',\n          css: {\n            'content': 'data(id)',\n            'text-valign': 'center',\n            'text-halign': 'center'\n          }\n        },\n        {\n          selector: ':parent',\n          css: {\n            'text-valign': 'top',\n            'text-halign': 'center'      \n          },\n          style: {\n            'shape' : 'roundrectangle',\n          }\n        },\n        {\n          selector: 'edge',\n          css: {\n            'curve-style': 'bezier',\n            'target-arrow-shape': 'triangle'\n          }\n        },\n        {\n          'selector': 'node[label]',\n          'style': {\n            'label': 'data(label)',\n            'text-valign': 'bottom',\n            'text-halign': 'center'\n          }\n        },\n        {\n          selector: '.reigon',\n          css: {\n              'background-color': '#2f3138',\n              'color' : '#C0C0C0',\n              'font-size' : '5em',\n              \"text-valign\": \"top\"\n          },\n        },\n        {\n          selector: '.map-E',\n          css: {\n              'background-color': '#262729',\n              'color' : '#C0C0C0',\n              'font-size' : '2em'\n          }\n        },\n        {\n          selector: '.warp',\n          css: {\n            'line-color': '#f92411',\n            \"curve-style\": \"straight-triangle\",\n          }\n        },\n        {\n          selector: '.conditional',\n          css: {\n            'line-color': '#1911f9'\n          }\n        },\n        {\n          selector: '.fixed',\n          css: {\n            'opacity': '0.5'\n          }\n        },\n        {\n          selector: '.significant',\n          css: {\n            'background-color': '#FFD700',\n            'shape' : 'hexagon'\n          }\n        },\n        {\n          selector: '.indoors',\n          css: {\n              'background-color': '#543d48',\n          }\n        },\n        {\n          selector: '.faded',\n          css: {\n            opacity: 0.2,\n            'line-color': '#24080c'\n          }\n        },\n      ],\n    \n      elements: {\n        nodes: [],\n        edges: []\n      }\n    });\n\n\n    cy.add(new ReigonNode(\"HOENN\"));\n\n    let data = [...mapData];\n\n    // Add the nodes\n    data.forEach(d => {\n\n      if (!cy.getElementById(toMapBank(d[0])).length) {\n          cy.add(new AreaNode(d)).addClass(\"map-\" + d[0][0]);\n      }\n\n      cy.add(new WarpNode(d));\n    })\n\n    // Add fixed edges\n    data.forEach(d => {\n\n      let connections = d[1].connections ? d[1].connections : {};\n\n      Object.entries(connections).forEach(entry => {\n\n        if (typeof entry[1] == 'string') {\n\n          // Conditional Connection\n          progressionState.remainingConditionalEdges.add(new CondidtionalEdge(d[0], entry[0], entry[1]));\n\n          // Temporarily add conditional edges in the graph so we can work out what areas will be connected in future\n          if (cy.getElementById(entry[0]).length > 0) {\n            cy.add(new CondidtionalEdge(d[0], entry[0], entry[1]))\n          }\n\n        } else {\n\n          // Fixed Connection       \n\n          // Only draw path if connection node is present in total list of warps\n          // i.e if I'm only doing warps to first gym, don't draw a connection to a gym 2 level warp \n          if (cy.getElementById(entry[0]).length > 0) {\n            cy.add(new FixedEdge(d[0], entry[0]))\n          }\n        }\n      });\n    });\n\n    // calculate future connected areas then remove all conditional edges from the network\n    progressionState.unconnectedComponents = cy.elements().components()\n                                                          .filter(e => e.size() > 1)\n                                                          .map(e => e.toArray().filter(n => n.group() == \"nodes\" && n.data().isWarp && n.data().hasMultipleConnections).map(p => p.data().id))\n                                                          .filter(arr => arr.length > 0);\n    progressionState.remainingConditionalEdges.forEach(node => cy.getElementById(node.data.id).remove());\n\n    cy.nodes().forEach(function(node){\n      node.css(\"width\", 80);\n      node.css(\"height\", 80);\n    });\n\n    if (!isHeadless) {\n        cy.layout({name: 'preset', nodeDimensionsIncludeLabels: true, positions:nodeToPosition}).run();\n    }\n\n    progressionState.makeFinalLocationsKey();\n    return progressionState;\n}\n\n/* HINTS */\nfunction getHint(location) {\n  let mapData = new Map(Object.entries(getMapData()));\n  let warp = warpList.get(mapData.get(location).to);\n  if (!warp) {\n    return \"NOT PRESENT\";\n  }\n  let info = mapData.get(warp.toRomCode + \",\" + warp.toBank + \",\" + warp.toMap + \",\" + warp.toWarpNo).name;\n  return info.split(\"-\")[0].trim() + \" - \" + info.split(\"-\")[1].trim();\n}\n\nvar HINTABLE_LOCATIONS = {\n  \"ROXANNE\"          : \"E,11,3,0\"  ,\n  \"BRAWLY\"           : \"E,3,3,0\"   ,\n  \"WATTSON\"          : \"E,10,0,0\"  ,\n  \"FLANNERY\"         : \"E,4,1,0\"   ,\n  \"NORMAN\"           : \"E,8,1,0\"   ,\n  \"WINONA\"           : \"E,12,1,0\"  ,\n  \"TATE AND LIZA\"    : \"E,14,0,0\"  ,\n  \"JUAN\"             : \"E,15,0,0\"  , \n  \"SIDNEY\"           : \"E,16,0,0\"  ,\n  \"PHOEBE\"           : \"E,16,1,0\"  ,\n  \"GLACIA\"           : \"E,16,2,0\"  ,\n  \"DRAKE\"            : \"E,16,3,0\"  ,\n  \"WALLACE\"          : \"E,16,4,0\"  ,\n  \"STEVEN\"           : \"E,24,107,0\",\n}\n\nvar PATH_FINDING_LOCATIONS = {\n  \"CUT\"       : \"E,11,11,0\",       \n  \"FLASH\"     : \"E,24,7,0\" ,         \n  \"ROCKSMASH\" : \"E,10,2,0\" ,             \n  \"STRENGTH\"  : \"E,24,4,0\" ,            \n  \"WATERFALL\" : \"E,0,7,2\"  ,             \n  \n  \"HOHO\"      : \"E,26,75,0\" ,     \n  \"LUGIA\"     : \"E,26,87,0\" ,      \n  \"KYOGRE\"    : \"E,24,103,0\",       \n  \"GRAUDON\"   : \"E,24,105,0\",        \n  \"RAYQUAZA\"  : \"E,24,85,0\" ,         \n  \n  \"BIKE SHOP\"    : \"E,10,1,0\" , \n  \"MAGMA EMBLEM\" : \"E,24,22,1\",    \n  \"STOREAGE KEY\" : \"E,24,63,0\",\n  \n  \"STONE OFFICE\"         : \"E,11,2,0\" , \n  \"STEVEN LETTER\"        : \"E,24,10,0\",  \n  \"WEATHER INSTITUTE F2\" : \"E,32,1,0\" , \n  \"WALLACE ORIGIN CAVE\"  : \"E,24,42,0\", \n  \"METEOR FALLS F1\"      : \"E,24,0,0\" ,  \n\n  \"PETALBURG\" : \"E,0,0,3\" ,\n  \"SLATEPORT\" : \"E,0,1,0\" ,\n  \"MAUVILLE\"  : \"E,0,2,1\" ,\n  \"RUSTBORO\"  : \"E,0,3,3\" ,\n  \"FORTREE\"   : \"E,0,4,0\" ,\n  \"LILYCOVE\"  : \"E,0,5,2\" ,\n  \"MOSSDEEP\"  : \"E,0,6,2\" ,\n  \"SOOTOPOLIS\": \"E,0,7,0\" ,\n  \"DEWFORD\"   : \"E,0,11,1\",\n  \"LAVARIDGE\" : \"E,0,12,3\",\n  \"FALLARBOR\" : \"E,0,13,2\",\n  \"VERDANTURF\": \"E,0,14,2\",\n  \"PACIFIDLOG\": \"E,0,15,0\",\n \n  \"ROXANNE\"          : \"E,11,3,0\"  ,\n  \"BRAWLY\"           : \"E,3,3,0\"   ,\n  \"WATTSON\"          : \"E,10,0,0\"  ,\n  \"FLANNERY\"         : \"E,4,1,0\"   ,\n  \"NORMAN\"           : \"E,8,1,0\"   ,\n  \"WINONA\"           : \"E,12,1,0\"  ,\n  \"TATE AND LIZA\"    : \"E,14,0,0\"  ,\n  \"JUAN\"             : \"E,15,0,0\"  , \n  \"SIDNEY\"           : \"E,16,0,0\"  ,\n  \"PHOEBE\"           : \"E,16,1,0\"  ,\n  \"GLACIA\"           : \"E,16,2,0\"  ,\n  \"DRAKE\"            : \"E,16,3,0\"  ,\n  \"WALLACE\"          : \"E,16,4,0\"  ,\n  \"STEVEN\"           : \"E,24,107,0\",\n}\n\nvar LOCATIONS_DISABLED_FLAGS = {\n  \"CUT\"                  : [\"HOENN_CUT\"],       \n  \"FLASH\"                : [\"HOENN_FLASH\"],         \n  \"ROCKSMASH\"            : [\"HOENN_ROCK_SMASH\"],             \n  \"STRENGTH\"             : [\"HOENN_STRENGTH\"],            \n  \"WATERFALL\"            : [\"HOENN_WATERFALL\"],   \n\n  \"BIKE SHOP\"            : [\"BIKE\"], \n  \"MAGMA EMBLEM\"         : [\"MAGMA_EMBLEM\"],    \n  \"STOREAGE KEY\"         : [\"STOREAGE_KEY\"],\n\n  \"STONE OFFICE\"         : [\"TALK_TO_STONE\"], \n  \"STEVEN LETTER\"        : [\"UNLOCK_SLATEPORT\"],  \n  \"WEATHER INSTITUTE F2\" : [\"WEATHER_INSTITUTE\"], \n  \"WALLACE ORIGIN CAVE\"  : [\"SPEAK_TO_WALLACE\"], \n  \"METEOR FALLS F1\"      : [\"MAGMA_METEOR_FALLS\"],\n  \n  \"ROXANNE\"              : [\"HOENN_CUT\", \"HOENN_FLASH\", \"HOENN_ROCK_SMASH\", \"HOENN_STRENGTH\", \"HOENN_SURF\", \"HOENN_WATERFALL\"],\n  \"BRAWLY\"               : [\"HOENN_FLASH\", \"HOENN_ROCK_SMASH\", \"HOENN_STRENGTH\", \"HOENN_SURF\", \"HOENN_WATERFALL\"],\n  \"WATTSON\"              : [\"HOENN_ROCK_SMASH\", \"HOENN_STRENGTH\", \"HOENN_SURF\", \"HOENN_WATERFALL\"],\n  \"FLANNERY\"             : [\"HOENN_STRENGTH\", \"HOENN_SURF\", \"HOENN_WATERFALL\"],\n  \"NORMAN\"               : [\"HOENN_SURF\", \"HOENN_WATERFALL\"],\n  \"WINONA\"               : [\"HOENN_WATERFALL\"],\n  \"TATE AND LIZA\"        : [\"HOENN_WATERFALL\"],\n  \"JUAN\"                 : [\"HOENN_WATERFALL\"]\n}\n\n\nfunction flagWeight(edge, location) {\n  if (edge.data().isWarp) {\n    return 1;\n  } \n\n  var difficulty = getMapData()[edge.data().source].connections[edge.data().target];\n\n  if (difficulty === true) {\n    // If the path is always traversable give a weight of 1\n    return 1;\n  } else if (LOCATIONS_DISABLED_FLAGS[location]) {\n    // If player is searching for a flag location try and avoid suggesting a route locked behind said flag\n    if (LOCATIONS_DISABLED_FLAGS[location].includes(difficulty)) {\n      return 99999;\n    }\n  }\n\n  // Otherwise use standard wieghts (prioritize least flags flags completed)\n  return Object.values(COMPOSITE_FLAGS).filter(f => f.flag == difficulty)[0].condition.length * 100;\n}\n\nfunction shortestPath(location) {\n  var fw = cy.elements().floydWarshall({weight: (edge) => flagWeight(edge, location),  directed : true})\n  let path = fw.path(cy.getElementById(\"E,0,10,2\"), PATH_FINDING_LOCATIONS[location] ? cy.getElementById(PATH_FINDING_LOCATIONS[location]) : cy.getElementById(location)).map(n =>  {\n     if(n.isNode()) {\n       return Object.assign({}, getMapData()[n.data().id]);\n     } else if (n.data().isWarp) {\n       return {name: n.data().id, type: \"WARP\"}\n     } else {\n       return {name: n.data().id, type: \"WALK\", conditions: [getMapData()[n.data().source].connections[n.data().target]]}\n     }\n  });\n\n  let allFlagsRequired = [];\n\n  for (i = path.length - 1; i >= 2; i--) {\n    if (path[i].type == \"WALK\" && path[i-2].type == \"WALK\") {\n      path[i].collapse = true;\n      path[i-1].collapse = true;\n\n      path[i-2].conditions = path[i-2].conditions.concat(path[i].conditions);\n    } \n    \n    if (path[i].type == \"WALK\") {\n      allFlagsRequired = allFlagsRequired.concat(path[i].conditions);\n    }\n  }\n\n  let instructions = path.filter(n => !n.collapse).map(n => {\n    if (n.type && n.conditions) {\n      let requirements = \"(\" + Array.from(new Set(n.conditions.filter(c => typeof c === 'string'))).join(\",\") + \")\";\n      return requirements == \"()\" ? n.type : n.type + requirements;\n    } else if (n.type) {\n      return n.type\n    } \n\n    return n.name\n  });\n\n  return {\"route\": instructions, \"flags\": new Set(allFlagsRequired.filter(c => typeof c === 'string'))}\n}\n\nvar MAP_SCALE = 100;\nvar OUTSIDE_MAP_SCALE = 30;\nvar INSIDE_MAP_SCALE = 10;\n\nvar MAP_BANK_POSITION = {\n\n  // TOWNS\n  \"0,0\" : {x: MAP_SCALE * 16,  y: MAP_SCALE * 88 } , // Petalburg\n  \"0,1\" : {x: MAP_SCALE * 72,  y: MAP_SCALE * 96 } , // Slateport\n  \"0,2\" : {x: MAP_SCALE * 72,  y: MAP_SCALE * 64 } , // Mauville\n  \"0,3\" : {x: MAP_SCALE * 8,   y: MAP_SCALE * 56 } , // Rustboro\n  \"0,4\" : {x: MAP_SCALE * 104, y: MAP_SCALE * 16 } , // Fortree\n  \"0,5\" : {x: MAP_SCALE * 152, y: MAP_SCALE * 40 } , // Lilycove\n  \"0,6\" : {x: MAP_SCALE * 200, y: MAP_SCALE * 56 } , // Mossdeep\n  \"0,7\" : {x: MAP_SCALE * 176, y: MAP_SCALE * 72 } , // Sootopolis\n  \"0,8\" : {x: MAP_SCALE * 224, y: MAP_SCALE * 80 } , // Evergrande\n  \"0,9\" : {x: MAP_SCALE * 40,  y: MAP_SCALE * 68 } , // little root\n  \"0,10\": {x: MAP_SCALE * 40,  y: MAP_SCALE * 88 } , // oldale\n  \"0,11\": {x: MAP_SCALE * 24,  y: MAP_SCALE * 128} , // dewford\n  \"0,12\": {x: MAP_SCALE * 48,  y: MAP_SCALE * 40 } , // lavaridge\n  \"0,13\": {x: MAP_SCALE * 32,  y: MAP_SCALE * 16 } , // fallarbour\n  \"0,14\": {x: MAP_SCALE * 40,  y: MAP_SCALE * 64 } , // verdanturf\n  \"0,15\": {x: MAP_SCALE * 144, y: MAP_SCALE * 96 } , // pacifidlog\n\n  // ROUTES\n\n  \"0,19\"  : {x: MAP_SCALE * 5  , y: MAP_SCALE * 82 }, // r104\n  \"0,20\"  : {x: MAP_SCALE * 8  , y: MAP_SCALE * 100}, // r105\n  \"0,21\"  : {x: MAP_SCALE * 8  , y: MAP_SCALE * 120}, // r106\n  \"0,23\"  : {x: MAP_SCALE * 30 , y: MAP_SCALE * 128}, // r108\n  \"0,24\"  : {x: MAP_SCALE * 72 , y: MAP_SCALE * 115}, // r109\n  \"0,25\"  : {x: MAP_SCALE * 72 , y: MAP_SCALE * 70} , // r110\n  \"0,26\"  : {x: MAP_SCALE * 72 , y: MAP_SCALE * 27} , // r111\n  \"0,27\"  : {x: MAP_SCALE * 62 , y: MAP_SCALE * 30} , // r112\n  \"0,28\"  : {x: MAP_SCALE * 40 , y: MAP_SCALE * 16} , // r113\n  \"0,29\"  : {x: MAP_SCALE * 15 , y: MAP_SCALE * 16} , // r114\n  \"0,30\"  : {x: MAP_SCALE * 8  , y: MAP_SCALE * 45} , // r115\n  \"0,31\"  : {x: MAP_SCALE * 8  , y: MAP_SCALE * 54} , // r116\n  \"0,32\"  : {x: MAP_SCALE * 50 , y: MAP_SCALE * 64} , // r117\n  \"0,34\"  : {x: MAP_SCALE * 90 , y: MAP_SCALE * 16} , // r119\n  \"0,35\"  : {x: MAP_SCALE * 124, y: MAP_SCALE * 16} , // r120\n  \"0,36\"  : {x: MAP_SCALE * 132, y: MAP_SCALE * 40} , // r121\n  \"0,37\"  : {x: MAP_SCALE * 132, y: MAP_SCALE * 45} , // r122\n  \"0,38\"  : {x: MAP_SCALE * 122, y: MAP_SCALE * 64} , // r123\n  \"0,39\"  : {x: MAP_SCALE * 172, y: MAP_SCALE * 40} , // r124\n  \"0,40\"  : {x: MAP_SCALE * 200, y: MAP_SCALE * 46} , // r125\n  \"0,46\"  : {x: MAP_SCALE * 155, y: MAP_SCALE * 96 }, // r131\n\n  // // UNDERWATER\n\n  \"0,51\"   : {x: MAP_SCALE * 1, y: MAP_SCALE * 150},\n  \"0,53\"   : {x: MAP_SCALE * 2, y: MAP_SCALE * 150},\n  \"24,5\"   : {x: MAP_SCALE * 3, y: MAP_SCALE * 150},\n  \"24,26\"  : {x: MAP_SCALE * 4, y: MAP_SCALE * 150},\n\n  // LOCATIONS\n\n    // Meteor Falls\n  \"24,0\"  : {x: MAP_SCALE * 10, y: MAP_SCALE * 150},\n  \"24,1\"  : {x: MAP_SCALE * 15, y: MAP_SCALE * 150}, \n  \"24,2\"  : {x: MAP_SCALE * 20, y: MAP_SCALE * 150}, \n  \"24,3\"  : {x: MAP_SCALE * 25, y: MAP_SCALE * 150}, \n\n    // Rusturf Tunnel\n  \"24,4\"  : {x: MAP_SCALE * 150, y: MAP_SCALE * 56}, \n\n    // Underwater\n  \"24,5\"  : {x: MAP_SCALE * 30, y: MAP_SCALE * 150}, \n\n    // Desert Ruins\n  \"24,6\"  : {x: MAP_SCALE * 35, y: MAP_SCALE * 150}, \n\n    // Granite Cave\n  \"24,7\"  : {x: MAP_SCALE * 45, y: MAP_SCALE * 150}, \n  \"24,8\"  : {x: MAP_SCALE * 50, y: MAP_SCALE * 150}, \n  \"24,9\"  : {x: MAP_SCALE * 55, y: MAP_SCALE * 150}, \n  \"24,10\" : {x: MAP_SCALE * 60, y: MAP_SCALE * 150}, \n\n    // Petalburg Woods\n  \"24,11\" : {x: MAP_SCALE * 4 , y: MAP_SCALE * 82}, \n\n    // Mt chimney\n  \"24,12\"  : {x: MAP_SCALE * 65, y: MAP_SCALE * 150},\n    // Jagged pass\n  \"24,13\"  : {x: MAP_SCALE * 70, y: MAP_SCALE * 150},\n    // Firey Path\n  \"24,14\"  : {x: MAP_SCALE * 75, y: MAP_SCALE * 150},\n    // Mt Pyer \n  \"24,15\"  : {x: MAP_SCALE * 80 , y: MAP_SCALE * 150},\n  \"24,16\"  : {x: MAP_SCALE * 85 , y: MAP_SCALE * 150},\n  \"24,17\"  : {x: MAP_SCALE * 95 , y: MAP_SCALE * 150},\n  \"24,18\"  : {x: MAP_SCALE * 100, y: MAP_SCALE * 150},\n  \"24,19\"  : {x: MAP_SCALE * 105, y: MAP_SCALE * 150},\n  \"24,20\"  : {x: MAP_SCALE * 110, y: MAP_SCALE * 150},\n  \"24,21\"  : {x: MAP_SCALE * 115, y: MAP_SCALE * 150},\n  \"24,22\"  : {x: MAP_SCALE * 120, y: MAP_SCALE * 150},\n    // Aqua Hideout\n  \"24,23\"  : {x: MAP_SCALE * 125, y: MAP_SCALE * 150},\n  \"24,24\"  : {x: MAP_SCALE * 130, y: MAP_SCALE * 150},\n  \"24,25\"  : {x: MAP_SCALE * 135, y: MAP_SCALE * 150},\n    // Seafloor cavern\n  \"24,28\"  : {x: MAP_SCALE * 0 , y: MAP_SCALE * 160},\n  \"24,29\"  : {x: MAP_SCALE * 5 , y: MAP_SCALE * 160},\n  \"24,30\"  : {x: MAP_SCALE * 10, y: MAP_SCALE * 160},\n  \"24,31\"  : {x: MAP_SCALE * 15, y: MAP_SCALE * 160},\n  \"24,34\"  : {x: MAP_SCALE * 20, y: MAP_SCALE * 160},\n  \"24,35\"  : {x: MAP_SCALE * 25, y: MAP_SCALE * 160},\n  \"24,36\"  : {x: MAP_SCALE * 30, y: MAP_SCALE * 160},\n    // Cave of origin\n  \"24,37\"  : {x: MAP_SCALE * 35, y: MAP_SCALE * 160},\n  \"24,42\"  : {x: MAP_SCALE * 40, y: MAP_SCALE * 160},\n    // Victory road\n  \"24,43\"  : {x: MAP_SCALE * 45, y: MAP_SCALE * 160},\n  \"24,44\"  : {x: MAP_SCALE * 50, y: MAP_SCALE * 160},\n  \"24,45\"  : {x: MAP_SCALE * 55, y: MAP_SCALE * 160},\n    // New Mauville\n  \"24,52\"  : {x: MAP_SCALE * 60, y: MAP_SCALE * 160},\n  \"24,53\"  : {x: MAP_SCALE * 65, y: MAP_SCALE * 160},\n    // Abandoned ship\n  \"24,54\"  : {x: MAP_SCALE * 65 , y: MAP_SCALE * 160},\n  \"24,55\"  : {x: MAP_SCALE * 70 , y: MAP_SCALE * 160},\n  \"24,56\"  : {x: MAP_SCALE * 75 , y: MAP_SCALE * 160},\n  \"24,57\"  : {x: MAP_SCALE * 80 , y: MAP_SCALE * 160},\n  \"24,58\"  : {x: MAP_SCALE * 85 , y: MAP_SCALE * 160},\n  \"24,59\"  : {x: MAP_SCALE * 90 , y: MAP_SCALE * 160},\n  \"24,60\"  : {x: MAP_SCALE * 95 , y: MAP_SCALE * 160},\n  \"24,61\"  : {x: MAP_SCALE * 100, y: MAP_SCALE * 160},\n  \"24,62\"  : {x: MAP_SCALE * 105, y: MAP_SCALE * 160},\n  \"24,63\"  : {x: MAP_SCALE * 110, y: MAP_SCALE * 160},\n  \"24,64\"  : {x: MAP_SCALE * 115, y: MAP_SCALE * 160},\n  \"24,65\"  : {x: MAP_SCALE * 120, y: MAP_SCALE * 160},\n    // Island cave\n  \"24,67\"  : {x: MAP_SCALE * 125, y: MAP_SCALE * 160},\n  \"24,68\"  : {x: MAP_SCALE * 130, y: MAP_SCALE * 160},\n  \"24,73\"  : {x: MAP_SCALE * 135, y: MAP_SCALE * 160},\n  \"24,77\"  : {x: MAP_SCALE * 140, y: MAP_SCALE * 160},\n  \"24,78\"  : {x: MAP_SCALE * 145, y: MAP_SCALE * 160},\n  \"24,79\"  : {x: MAP_SCALE * 150, y: MAP_SCALE * 160},\n  \"24,80\"  : {x: MAP_SCALE * 0, y: MAP_SCALE * 170},\n  \"24,81\"  : {x: MAP_SCALE * 5, y: MAP_SCALE * 170},\n  \"24,82\"  : {x: MAP_SCALE * 10, y: MAP_SCALE * 170},\n  \"24,84\"  : {x: MAP_SCALE * 15, y: MAP_SCALE * 170},\n  \"24,85\"  : {x: MAP_SCALE * 20, y: MAP_SCALE * 170},\n  \"24,86\"  : {x: MAP_SCALE * 25, y: MAP_SCALE * 170},\n  \"24,87\"  : {x: MAP_SCALE * 30, y: MAP_SCALE * 170},\n  \"24,88\"  : {x: MAP_SCALE * 35, y: MAP_SCALE * 170},\n  \"24,89\"  : {x: MAP_SCALE * 40, y: MAP_SCALE * 170},\n  \"24,90\"  : {x: MAP_SCALE * 45, y: MAP_SCALE * 170},\n  \"24,91\"  : {x: MAP_SCALE * 50, y: MAP_SCALE * 170},\n  \"24,92\"  : {x: MAP_SCALE * 55, y: MAP_SCALE * 170},\n  \"24,93\"  : {x: MAP_SCALE * 60, y: MAP_SCALE * 170},\n  \"24,94\"  : {x: MAP_SCALE * 65, y: MAP_SCALE * 170},\n  \"24,95\"  : {x: MAP_SCALE * 70, y: MAP_SCALE * 170},\n  \"24,96\"  : {x: MAP_SCALE * 75, y: MAP_SCALE * 170},\n  \"24,97\"  : {x: MAP_SCALE * 80, y: MAP_SCALE * 170},\n  \"24,103\" : {x: MAP_SCALE * 85, y: MAP_SCALE * 170},\n  \"24,105\" : {x: MAP_SCALE * 90, y: MAP_SCALE * 170},\n  \"24,107\" : {x: MAP_SCALE * 90, y: MAP_SCALE * 170},\n  \"26,10\"  : {x: MAP_SCALE * 100, y: MAP_SCALE * 170},\n  \"26,56\"  : {x: MAP_SCALE * 105, y: MAP_SCALE * 170},\n  \"26,57\"  : {x: MAP_SCALE * 110, y: MAP_SCALE * 170},\n  \"26,58\"  : {x: MAP_SCALE * 115, y: MAP_SCALE * 170},\n  \"26,60\"  : {x: MAP_SCALE * 120, y: MAP_SCALE * 170},\n  \"26,66\"  : {x: MAP_SCALE * 125, y: MAP_SCALE * 170},\n  \"26,68\"  : {x: MAP_SCALE * 130, y: MAP_SCALE * 170},\n  \"26,69\"  : {x: MAP_SCALE * 135, y: MAP_SCALE * 170},\n  \"26,70\"  : {x: MAP_SCALE * 140, y: MAP_SCALE * 170},\n  \"26,74\"  : {x: MAP_SCALE * 145, y: MAP_SCALE * 170},\n  \"26,75\"  : {x: MAP_SCALE * 150, y: MAP_SCALE * 170},\n  \"26,87\"  : {x: MAP_SCALE * 155, y: MAP_SCALE * 170},\n  \"26,9\"   : {x: MAP_SCALE * 160, y: MAP_SCALE * 170},\n\n}\n\nvar BANK_TO_EXTERNAL_HUB = {\n  \"1\"  : \"0,9\"  , // Little Root\n  \"2\"  : \"0,10\" , // Oldale\n  \"3\"  : \"0,11\" , // Dewford\n  \"4\"  : \"0,12\" , // lavaridge\n  \"5\"  : \"0,13\" , // fallarbour\n  \"6\"  : \"0,14\" , // verdanturf\n  \"7\"  : \"0,15\" , // pacifidlog\n  \"8\"  : \"0,0\"  , // Petalburg\n  \"9\"  : \"0,1\"  , // Slateport\n  \"10\" : \"0,2\"  , // Mauville\n  \"11\" : \"0,3\"  , // Rustboro\n  \"12\" : \"0,4\"  , // Fortree\n  \"13\" : \"0,5\"  , // Lilycove\n  \"14\" : \"0,6\"  , // Mossdeep\n  \"15\" : \"0,7\"  , // Sootopolis\n  \"16\" : \"0,8\"  , // Evergrande\n  \"17\" : \"0,19\" , // r104\n  \"18\" : \"0,26\" , // r111\n  \"19\" : \"0,27\" , // r112\n  \"20\" : \"0,29\" , // r114\n  \"21\" : \"0,31\" , // r116\n  \"22\" : \"0,32\" , // r117\n  \"23\" : \"0,36\" , // r121\n  \"27\" : \"0,19\" , // r104\n  \"28\" : \"0,24\" , // r109\n  \"29\" : \"0,25\" , // r110\n  \"30\" : \"0,28\" , // r113\n  \"31\" : \"0,38\" , // r123\n  \"32\" : \"0,34\" , // r119\n  \"33\" : \"0,39\" , // r124\n}\n\nfunction nodeToPosition(node) {\n  \n  if (node.data().isWarp) {\n\n    let id = node.data().id;\n    let data = getMapData()[id];\n    let parent = mapBankToPosition(toMapBank(node.data().id), id.split(\",\")[3]);\n\n    if (!parent) {\n      return {'x':0, 'y':0};\n    }\n\n\n    let jointCoords = data.name.split(\"-\")[3].trim();\n\n    let isOutside = id.split(\",\")[1] == '0';\n    let scale = isOutside ? OUTSIDE_MAP_SCALE : INSIDE_MAP_SCALE;\n    if (!isOutside) {\n      node.addClass('indoors');\n    }\n\n    let x = parent.x + (scale * parseInt(jointCoords.split(\",\")[0], 16));\n    let y = parent.y + (scale * parseInt(jointCoords.split(\",\")[1], 16));\n\n    return {'x':x, 'y':y};\n\n  } \n\n  return {'x':0, 'y':0};\n}\n\nvar missingParentList = new Set();\n\nvar addedGroups = new Set();\nfunction mapBankToPosition(bank, nodeCount) {\n  \n  // Node is within a hub\n  let parentPosition = MAP_BANK_POSITION[bank.substring(2)]\n\n  if (parentPosition) {\n    return parentPosition;\n  } \n\n\n  // Node is a building withing a hub\n  let externalHub = BANK_TO_EXTERNAL_HUB[bank.split(\",\")[1]];\n\n  if (externalHub) {\n    parentPosition = MAP_BANK_POSITION[externalHub];\n    if (parentPosition) {\n      parentPosition.y = parentPosition.y - (20 * INSIDE_MAP_SCALE);\n      //parentPosition.x = parentPosition.x - (10 * nodeCount * INSIDE_MAP_SCALE)\n      return parentPosition;\n    } \n  }\n\n  missingParentList.add(bank);\n  return false;\n}"],"names":["mixedGameData","Object","entries","EMERALD_WARPS","forEach","e","remappingsData","isHeadless","warpList","Map","getMapData","getRandomisationAlgorithm","generateRandomMappings","getRandomisationConfig","config","hoennLevel","document","getElementById","value","getFlagData","FLAG_DATA","getEscapePaths","EMERALD_ESCAPE_PATHS","mappingToWarps","mappingData","mappedList","mapping","from","trigger","toParts","target","split","set","PKWarp","source","async","mapWarps","seed","flagsState","unaddedConditionalEdges","mapData","getFilteredData","flagData","escapePaths","apply","getAugmetedRemappingData","updateHashDisplay","storageManager","persist","WarpListData","rng","RNG","getHash","progressionState","initMappingGraph","ProgressionState","generateEscapeWarps","root","getInitialWarp","unconnectedComponents","filter","a","includes","moreWarpsToMap","doNextMapping","console","error","M","toast","html","displayLength","updateProgressionState","getBaseRemappingData","KEY_LOCATION_DATA","filterIgnored","k","ignore","filterByConfig","usabledWarps","w","filterLevel","kantoLevel","johtoLevel","get","level","filteredWarpIds","Set","keys","randomMustLinkHomeWarps","map","s","n","has","length","flatMap","nextRange","filteGroupedNotMain","groupMain","grouped","removeRemovableLocations","tags","toMapBank","arr","this","remainingConditionalEdges","flags","unmarkedLocations","LOCATIONS_TRIGGER","unmarkedFlags","COMPOSITE_FLAGS","unmarkedKeyLocations","KEY_LOCATIONS","Array","exportMapping","find","then","data","JSON","stringify","file","File","type","saveAs","importMapping","files","reader","FileReader","readAsText","onload","readerEvent","content","result","warpListData","parse","updateWarpListData","FormSelect","getInstance","_handleSelectChangeBound","innerHTML","Math","abs","toString","toUpperCase","romCode","bank","warpNo","toRomCode","toBank","toMap","toWarpNo","input","hash","len","i1","charCodeAt","m","c","state","floor","random","ReigonNode","id","classes","AreaNode","node","isMap","parent","toReigon","label","name","trim","WarpNode","isWarp","isMapped","needsReturn","noReturn","lowPriority","hasMultipleConnections","connections","values","FixedEdge","CondidtionalEdge","condition","WarpEdge","count","window","cy","remappingData","addTriggerData","addGroupedMappings","groupMappings","groups","g","push","to","edges","warpIdData","findAccessibleUnmappedNodes","cy1","nodeSet","elements","bfs","roots","directed","visit","v","u","depth","add","accessibleNodes","cachedNodes","inacessibleNodes","nodes","not","inaccesibleFlagLocations","inaccesibleKeyLocations","size","warn","preferedList","warp1","warp2","shouldCacheNodes","inacessibleHubs","degree","delete","candidateUnconnectedComponentNodes","flat","preferedcandidateUnconnectedComponentNodes","randomNodeIdFromComponent","selectRandomWarp","log","warp1Candidates","preferedCandidateList","homeEscapesList","fw","floydWarshall","distance","splice","indexOf","addClass","priorityInaccessibleNodes","oddOneOutLocation","Error","listOfWarps","connectingWarp","warpNeedsReturn","warpNoReturn","currentNodes","location","every","flag","conditionalEdges","cytoscape","container","headless","styleEnabled","boxSelectionEnabled","textureOnViewport","style","selector","css","shape","color","opacity","d","entry","components","toArray","group","p","remove","layout","nodeDimensionsIncludeLabels","positions","nodeToPosition","run","makeFinalLocationsKey","getHint","warp","info","prototype","finalLocations","HINTABLE_LOCATIONS","l","nextInt","nextFloat","start","end","rangeSize","randomUnder1","choice","array","ROXANNE","BRAWLY","WATTSON","FLANNERY","NORMAN","WINONA","JUAN","SIDNEY","PHOEBE","GLACIA","DRAKE","WALLACE","STEVEN","PATH_FINDING_LOCATIONS","CUT","FLASH","ROCKSMASH","STRENGTH","WATERFALL","HOHO","LUGIA","KYOGRE","GRAUDON","RAYQUAZA","PETALBURG","SLATEPORT","MAUVILLE","RUSTBORO","FORTREE","LILYCOVE","MOSSDEEP","SOOTOPOLIS","DEWFORD","LAVARIDGE","FALLARBOR","VERDANTURF","PACIFIDLOG","LOCATIONS_DISABLED_FLAGS","flagWeight","edge","difficulty","f","shortestPath","path","weight","isNode","assign","conditions","allFlagsRequired","i","collapse","concat","route","requirements","join","MAP_SCALE","OUTSIDE_MAP_SCALE","INSIDE_MAP_SCALE","MAP_BANK_POSITION","x","y","BANK_TO_EXTERNAL_HUB","mapBankToPosition","jointCoords","isOutside","scale","parseInt","missingParentList","addedGroups","nodeCount","parentPosition","substring","externalHub"],"version":3,"file":"build-index.81e792cc.js.map"}