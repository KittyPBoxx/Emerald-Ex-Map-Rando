{"mappings":"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","sources":["dist/CoreHacks/EmulationCoreHacks.js"],"sourcesContent":["/**\n * Random Warp Script\n */\nvar isWarping = false;\nvar randomWarpsEnabled = true;\nvar needsPositioningAfterWarp = false;\n\n/******************/\n/* Warp Addresses */\n/******************/\n/**\n *  Order of events for a warp script\n * \n *  1) A player steps on a warp tile\n *  2) A write8 is perforemed to bank, then map, then warp for current game\n *  3) Several read8s are performed to bank, then map, then warp \n *  4) Exit animation is played (i.e walking through a door) and screen fades to black\n *  5) A write32 is done to the last bank address\n *  6) New map is loaded and fades in then enterance animation is played \n * \n *  Warp flow:\n * \n *  Within game:\n *  Wait for write to warp address -> \n *  switch to warping state -> \n *  wait for next read from warp address -> \n *  before reading overwrite it -> \n *  update flags e.t.c\n *  continue  \n */\nconst EMERALD_CURRENT_BANK = 0x2032ee4;\nconst EMERALD_CURRENT_MAP  = 0x2032ee5;\nconst EMERALD_CURRENT_WARP = 0x2032ee6;\n\n// These are from the normally dynamic save block \n// gSaveBlock1Ptr->location.x e.t.c\nconst X_VAL_POST_WARP = 0x02026688;\nconst Y_VAL_POST_WARP = 0x0202668A;\n\nvar flagManager; // only global to help debugging\n\nconst SPEEDUP_HACKS_MODE = { ON: 2, BATTLE_ONLY: 1, OFF: 0}\nvar speedupHackState = SPEEDUP_HACKS_MODE.ON;\n\nfunction setSpeedupHackState(mode) {\n    if (mode == SPEEDUP_HACKS_MODE.ON) {\n        bypassWait = true;\n        speedupHackState = SPEEDUP_HACKS_MODE.ON\n    } else if (mode == SPEEDUP_HACKS_MODE.BATTLE_ONLY) {\n        bypassWait = false;\n        speedupHackState = SPEEDUP_HACKS_MODE.BATTLE_ONLY;\n    } else if (mode == SPEEDUP_HACKS_MODE.OFF) {\n        bypassWait = false;\n        speedupHackState = SPEEDUP_HACKS_MODE.OFF;\n    }\n}\n\nvar disableWaitCount = 0;\nasync function disableBypassWait() {\n    bypassWait = false;\n    disableWaitCount = Math.max(disableWaitCount + 1, 2);\n    while(disableWaitCount > 0 ) {\n        await delay(500);\n        disableWaitCount--\n    }\n    disableWaitCount = 0;\n    bypassWait = true;\n}\n\nvar usingHomeWarp = false;\nGameBoyAdvanceCPU.prototype.write32WithoutIntercept = GameBoyAdvanceCPU.prototype.write32;\nGameBoyAdvanceCPU.prototype.write32 = function (address, data) { \n\n    if (address == 0x02038c5c && speedupHackState == SPEEDUP_HACKS_MODE.ON) {\n        if (data == -1) {\n            disableBypassWait();\n        }\n    } else if (address == 0x02020004) {\n        // Make emulation more accurate :/\n        data = 0;\n    } else if (address == 0x02025364 && speedupHackState == SPEEDUP_HACKS_MODE.BATTLE_ONLY) {\n        bypassWait = true;\n    }    \n\n    if (usingHomeWarp && address == EMERALD_CURRENT_BANK){\n        this.write8(EMERALD_CURRENT_BANK, 0);\n        this.write8(EMERALD_CURRENT_MAP, 9);\n        this.write8(EMERALD_CURRENT_WARP, 1);\n        usingHomeWarp = false;\n        return;\n    }\n\n    this.write32WithoutIntercept(address, data);\n}\n\nGameBoyAdvanceCPU.prototype.write16WithoutIntercept = GameBoyAdvanceCPU.prototype.write16;\nGameBoyAdvanceCPU.prototype.write16 = function (address, data) { \n\n\n    if (needsPositioningAfterWarp) {\n        if (address == X_VAL_POST_WARP) {\n    \n            console.log(\"Writing x\");\n            return this.write16WithoutIntercept(address, needsPositioningAfterWarp[0]);\n    \n        } else if (address == Y_VAL_POST_WARP) {\n    \n            console.log(\"Writing y\");\n            let yLocation = needsPositioningAfterWarp[1];\n            needsPositioningAfterWarp = false;\n            return this.write16WithoutIntercept(address, yLocation);\n        }\n    }\n\n    this.write16WithoutIntercept(address, data);\n}\n\n GameBoyAdvanceCPU.prototype.write8WithoutIntercept = GameBoyAdvanceCPU.prototype.write8;\n GameBoyAdvanceCPU.prototype.write8 = function (address, data) { \n\n    if (address == EMERALD_CURRENT_WARP){\n        isWarping = randomWarpsEnabled || forceNextWarp;\n    } else if (address == 0x02024f0e && data != 0 && speedupHackState == SPEEDUP_HACKS_MODE.BATTLE_ONLY) {\n        bypassWait = false;\n    }\n    \n    this.write8WithoutIntercept(address, data);\n }\n\nGameBoyAdvanceCPU.prototype.read8WithoutIntercept = GameBoyAdvanceCPU.prototype.read8;\nGameBoyAdvanceCPU.prototype.read8 = function (address) {\n\n    \n    if (!isWarping) return this.read8WithoutIntercept(address);\n\n    if (address == EMERALD_CURRENT_BANK) \n    {\n        address = this.handleWarpRedirection(address, IodineGUI.Iodine.IOCore.cartridge.romCode);\n    }\n\n    return this.read8WithoutIntercept(address);\n}\n\nvar reverseNextWarp = false; // Set true when loading a save state that was going through a warp\nvar forceNextWarp = null;\nGameBoyAdvanceCPU.prototype.handleWarpRedirection = function (address, romCode) {\n\n    let bank = this.read8WithoutIntercept(address);\n    let map = this.read8WithoutIntercept(address + 1);\n    let warpNo = this.read8WithoutIntercept(address + 2);\n    \n    if (warpNo == 255) { \n\n        // Special Fix for norman after the tutorial\n        if (romCode + \",\" + bank + \",\" + map + \",\" + warpNo == \"E,8,1,255\") {\n            writeGameVar(0x4085, 6);\n            modifyBaseFlag(0x2D6, 1);\n            modifyBaseFlag(0x362, 1);\n        }\n\n        // Avoid scripted warps, route connections without zone e.t.c\n        return address; \n    }\n\n    let pkWarp = null;\n    let trigger = romCode + \",\" + bank + \",\" + map + \",\" + warpNo;\n\n    if (forceNextWarp) {\n        let toParts = forceNextWarp.split(\",\");\n        pkWarp = new PKWarp(trigger, toParts[0], toParts[1], toParts[2], toParts[3], forceNextWarp)\n        reverseNextWarp = false;\n        forceNextWarp = null;\n    } else if(reverseNextWarp && warpList.get(trigger)) {\n        let source = warpList.get(trigger).source;\n        let toParts = source.split(\",\");\n        pkWarp = new PKWarp(trigger, toParts[0], toParts[1], toParts[2], toParts[3], source)\n        reverseNextWarp = false;\n    } else {\n        pkWarp = warpList.get(trigger);\n        console.log(\"Warping triggered for \" + trigger); \n    }\n\n    if (pkWarp) {\n\n        this.write8(EMERALD_CURRENT_BANK, pkWarp.toBank);\n        this.write8(EMERALD_CURRENT_MAP, pkWarp.toMap);\n        this.write8(EMERALD_CURRENT_WARP, pkWarp.toWarpNo);\n\n        specialWarpHandling(pkWarp, trigger);\n\n        console.log(\"Warping sending to \" + pkWarp.toRomCode + \",\" + pkWarp.toBank + \",\" + pkWarp.toMap + \",\" + pkWarp.toWarpNo); \n    } else {\n        console.log(\"Warping sending to vanilla\"); \n    }\n    \n    isWarping = false;\n\n    return address;\n}\n\nvar warpsNeedingPositionForces = new Map();\nwarpsNeedingPositionForces.set(\"E,0,1,5\"    , [0x1E, 0x1B]);\nwarpsNeedingPositionForces.set(\"E,0,5,0\"    , [0x1B, 0x07]);\nwarpsNeedingPositionForces.set(\"E,0,2,0\"    , [0x08, 0x06]);\nwarpsNeedingPositionForces.set(\"E,0,7,5\"    , [0x2D, 0x07]);\nwarpsNeedingPositionForces.set(\"E,0,7,9\"    , [0x35, 0x1D]);\nwarpsNeedingPositionForces.set(\"E,0,7,4\"    , [0x09, 0x07]);\nwarpsNeedingPositionForces.set(\"E,0,8,2\"    , [0x12, 0x2A]);\nwarpsNeedingPositionForces.set(\"E,0,11,3\"   , [0x11, 0x0E]);\nwarpsNeedingPositionForces.set(\"E,0,12,5\"   , [0x09, 0x02]);\nwarpsNeedingPositionForces.set(\"E,0,14,4\"   , [0x08, 0x02]);\nwarpsNeedingPositionForces.set(\"E,0,15,0\"   , [0x08, 0x10]);\nwarpsNeedingPositionForces.set(\"E,0,26,0\"   , [0x0D, 0x72]);\nwarpsNeedingPositionForces.set(\"E,11,0,2\"   , [0x0E, 0x02]);\nwarpsNeedingPositionForces.set(\"E,14,9,2\"   , [0x0D, 0x02]);\nwarpsNeedingPositionForces.set(\"E,14,10,2\"  , [0x0d, 0x02]);\nwarpsNeedingPositionForces.set(\"E,16,10,2\"  , [0x09, 0x02]);\nwarpsNeedingPositionForces.set(\"E,24,8,2\"   , [0x1D, 0x0D]);\nwarpsNeedingPositionForces.set(\"E,24,8,3\"   , [0x1C, 0x15]);\nwarpsNeedingPositionForces.set(\"E,24,9,0\"   , [0x1D, 0x0D]);\nwarpsNeedingPositionForces.set(\"E,24,9,1\"   , [0x1C, 0x15]);\nwarpsNeedingPositionForces.set(\"E,24,13,4\"  , [0x10, 0x13]);\nwarpsNeedingPositionForces.set(\"E,24,16,4\"  , [0x0B, 0x09]);\nwarpsNeedingPositionForces.set(\"E,24,16,2\"  , [0x0A, 0x0C]);\nwarpsNeedingPositionForces.set(\"E,24,17,5\"  , [0x06, 0x0C]);\nwarpsNeedingPositionForces.set(\"E,24,17,4\"  , [0x0A, 0x0C]);\nwarpsNeedingPositionForces.set(\"E,24,18,2\"  , [0x0C, 0x0A]);\nwarpsNeedingPositionForces.set(\"E,24,18,3\"  , [0x0C, 0x0C]);\nwarpsNeedingPositionForces.set(\"E,24,19,3\"  , [0x0C, 0x0A]);\nwarpsNeedingPositionForces.set(\"E,24,19,4\"  , [0x0C, 0x0C]);\nwarpsNeedingPositionForces.set(\"E,24,24,10\" , [0x20, 0x13]);\nwarpsNeedingPositionForces.set(\"E,24,25,5\"  , [0x05, 0x08]);\nwarpsNeedingPositionForces.set(\"E,24,25,9\"  , [0x20, 0x14]);\nwarpsNeedingPositionForces.set(\"E,24,29,2\"  , [0x06, 0x01]);\nwarpsNeedingPositionForces.set(\"E,24,78,0\"  , [0x11, 0x0D]);\nwarpsNeedingPositionForces.set(\"E,24,81,0\"  , [0x03, 0x01]);\nwarpsNeedingPositionForces.set(\"E,24,82,1\"  , [0x07, 0x01]);\nwarpsNeedingPositionForces.set(\"E,24,95,0\"  , [0x12, 0x0C]);\nwarpsNeedingPositionForces.set(\"E,24,96,0\"  , [0x12, 0x0C]);\nwarpsNeedingPositionForces.set(\"E,26,74,1\"  , [0x05, 0x05]);\nwarpsNeedingPositionForces.set(\"E,26,87,0\"  , [0x0E, 0x13]);\n\nvar escalatorTriggers = new Set();\nescalatorTriggers.add(\"E,8,5,0\"  );\nescalatorTriggers.add(\"E,9,12,0\" );\nescalatorTriggers.add(\"E,10,6,0\" );\nescalatorTriggers.add(\"E,11,6,0\" );\nescalatorTriggers.add(\"E,12,3,0\" );\nescalatorTriggers.add(\"E,13,7,0\" );\nescalatorTriggers.add(\"E,14,4,0\" );\nescalatorTriggers.add(\"E,15,3,0\" );\nescalatorTriggers.add(\"E,16,13,0\");\nescalatorTriggers.add(\"E,16,14,0\");\nescalatorTriggers.add(\"E,2,3,0\"  );\nescalatorTriggers.add(\"E,3,2,0\"  );\nescalatorTriggers.add(\"E,4,6,0\"  );\nescalatorTriggers.add(\"E,5,5,0\"  );\nescalatorTriggers.add(\"E,6,5,0\"  );\nescalatorTriggers.add(\"E,7,1,0\"  );\n\n/*\n*   DuringWarp handling takes place before the warp had happened but after the new rom has been loaded\n*   This is useful for when you need to set a flag/var in  a game you are loading before the new map loads\n*/\nfunction specialWarpHandling(pkwarp, trigger) {\n    \n    let destination = pkwarp.toRomCode + \",\" + pkwarp.toBank + \",\" + pkwarp.toMap + \",\" + pkwarp.toWarpNo;\n\n    // If Petalburg Gym make either catch tutorial or battle\n    if (destination == \"E,8,1,0\") {\n        // If catch tutorial hasn't been done we set to that\n        // otherwise we set to battle state\n        let normanState = readGameVar(0x4085);\n        if (normanState < 2) {\n            writeGameVar(0x4085, 0)\n        } else {\n            writeGameVar(0x4085, 6)\n        }\n    } else if (destination == \"E,16,0,0\") {\n        // E4 rooms needs to walk fowards when entering\n        writeGameVar(0x409C, 0);\n    } else if (destination == \"E,16,0,1\")  {\n        writeGameVar(0x409C, 1);\n    } else if (destination == \"E,16,1,0\") {\n        writeGameVar(0x409C, 1);\n    } else if (destination == \"E,16,1,1\") {\n        writeGameVar(0x409C, 2);\n    } else if (destination == \"E,16,2,0\") {\n        writeGameVar(0x409C, 2);\n    } else if (destination == \"E,16,2,1\") {\n        writeGameVar(0x409C, 3);\n    } else if (destination == \"E,16,3,0\") {\n        writeGameVar(0x409C, 3);\n    } else if (destination == \"E,16,3,1\") {\n        writeGameVar(0x409C, 4);\n    } else  if (destination == \"E,10,0,0\") {\n        // If Mauville Gym make battle\n        new FlagManager().setFlag(IodineGUI.Iodine.IOCore.cpu.read32(EMERALD_SAVE_1_PTR), 0x1270, 0x391, 0);\n    } else if (destination == \"E,29,1,0\" || destination == \"E,29,1,1\") {\n        // Make Sure the trick master won't crash the game\n        if (readGameVar(\"E\", 0x4044) > 7) {\n            writeGameVar(\"E\", 0x4044, 7);\n        }\n    } else if (warpsNeedingPositionForces.get(destination)) {\n\n        // Some warps will break expected connections if we use an escalator / teleport \n        // so we need to fix the post warp position manually\n        \n        needsPositioningAfterWarp = warpsNeedingPositionForces.get(destination);\n\n        // If the trigger was an escalator we need to apply the movement script to the position correction  \n        if (escalatorTriggers.has(trigger)) {\n            needsPositioningAfterWarp[0]--;\n        }\n        \n    }\n\n    new FlagManager().writeFlags();\n}\n\n/***********************/\n/* Dynamic rom patches */  \n/***********************/\n\n\nconst MAP_TYPE_ADDRESS = 0x2037f2f;\nconst MAP_TYPES = {\n    NONE       : 0,\n    TOWN       : 1,\n    CITY       : 2,\n    ROUTE      : 3,\n    UNDERGROUND: 4,\n    UNDERWATER : 5,\n    OCEAN_ROUTE: 6,\n    UNKNOWN    : 7, // Not used by any map.\n    INDOOR     : 8,\n    SECRET_BASE: 9\n};\n\nfunction isMapOutside() {\n    let mapType = IodineGUI.Iodine.IOCore.cpu.read8(MAP_TYPE_ADDRESS);\n    return mapType == MAP_TYPES.NONE ||\n           mapType == MAP_TYPES.TOWN ||\n           mapType == MAP_TYPES.CITY ||\n           mapType == MAP_TYPES.ROUTE ||\n           mapType == MAP_TYPES.UNDERWATER ||\n           mapType == MAP_TYPES.OCEAN_ROUTE;\n}\n\nGameBoyAdvanceMultiCartridge.prototype.readROM16WithoutIntercept = GameBoyAdvanceMultiCartridge.prototype.readROM16;\nGameBoyAdvanceMultiCartridge.prototype.readROM16 = function (address) {\n    \n    if (address == 0xb9f78) {\n        console.log(\"Destination to escape warp\");\n\n        if (isMapOutside()) {\n            usingHomeWarp = true;\n        }\n    }   \n\n    return this.readROM16WithoutIntercept(address);\n}\n\nvar currentlySaving = false;\nGameBoyAdvanceMultiCartridge.prototype.readROM8WithoutIntercept = GameBoyAdvanceMultiCartridge.prototype.readROM8;\nGameBoyAdvanceMultiCartridge.prototype.readROM8 = function (address) {\n\n    if (currentlySaving) {\n        if ((address == 3084361 || address == 8455992)) {\n            console.log(\"saved\");\n            saveAfterDelay();\n            currentlySaving = false;\n        }\n    }\n\n    return this.readROM8WithoutIntercept(address);\n}\n\nasync function saveAfterDelay() {\n    await delay(200);\n    IodineGUI.Iodine.exportSave();\n}\n\nGameBoyAdvanceSaves.prototype.saveIntercept = function(address, data) {\n    if (address == 0 && data == 48) {\n        currentlySaving = true;\n    } \n}\n\n/******************/\n/* Data Addresses */\n/******************/\n/**\n *  Addresses for save data, Team is not copied here because we use where it is statically stored in memory\n *  Addresses are offsets from the 32bit addresses that can be found using the pointers (ptr locations are static)\n *  Money is xor'd against 32bit xor key, item quantity is xor'd against the first 2 bytes of that key.\n *  \n *  Dynamicly Addressed memory means the three sections of data move in memory (hence we need to look the up with ptrs)\n *  These change each time the bag is accessed or a warp is triggered (and at various other times)\n * \n *  There are 3 dynamic sections. SAV1 (mostly relating to team and items)\n *  SAV2 (storing the xor key, and trainer data, play time, settings, seen mons e.t.c)\n *  We don't deal with SAV3 but it's mostly boxed pokemon / box config   \n */\n\n\n// DYNAMIC SAV1 PTRs\nconst EMERALD_SAVE_1_PTR = 0x03004cac;\n\n// DYNAMIC SAV2 PTRs\nconst EMERALD_SAVE_2_PTR = 0x03004cb0;\n\n/*******************/\n/* Flag Management */\n/*******************/\n\n// This handles any general vars/flags that need to be transfered when switching games\n\n// IN DYNAMIC SAV1\n// The equations are so the offsets line up the the flags defined in the decomp projects\n// https://github.com/pret/pokeemerald/blob/master/include/constants/flags.h\n// https://github.com/pret/pokeemerald/blob/master/include/constants/vars.h\nconst EMERALD_BASE_FLAGS_OFFSET   = 0x1270;\nconst EMERALD_SYS_FLAGS_OFFSET    = 0x137C;\nconst EMERALD_BADGE1_OFFSET       = 0x7;\nconst EMERALD_BADGE2_OFFSET       = 0x8;\nconst EMERALD_BADGE3_OFFSET       = 0x9;\nconst EMERALD_BADGE4_OFFSET       = 0xA;\nconst EMERALD_BADGE5_OFFSET       = 0xB;\nconst EMERALD_BADGE6_OFFSET       = 0xC;\nconst EMERALD_BADGE7_OFFSET       = 0xD;\nconst EMERALD_BADGE8_OFFSET       = 0xE;\nconst EMERALD_RUNNING_SHOE_OFFSET = 0x60;\nconst EMERALD_POKEDEX_OFFSET      = 0x1; \nconst EMERALD_NATIONAL_DEX_OFFSET = 0x36;\nconst EMERALD_BADGE_OFFSETS = [EMERALD_BADGE1_OFFSET, \n                               EMERALD_BADGE2_OFFSET, \n                               EMERALD_BADGE3_OFFSET, \n                               EMERALD_BADGE4_OFFSET, \n                               EMERALD_BADGE5_OFFSET, \n                               EMERALD_BADGE6_OFFSET, \n                               EMERALD_BADGE7_OFFSET, \n                               EMERALD_BADGE8_OFFSET];\n\nconst EMERALD_BASE_VAR_OFFSET = 0x139c;\n\nconst EMERALD_STARTER_CHOICE_OFFSET = 0x4023;\n\nfunction FlagManager() {\n    this.badge1 = null;\n    this.badge2 = null;\n    this.badge3 = null;\n    this.badge4 = null;\n    this.badge5 = null;\n    this.badge6 = null;\n    this.badge7 = null;\n    this.badge8 = null;\n    this.hasRunningShoes = null;\n}\n\nFlagManager.prototype.getFlag = function (saveOffset, sectionOffset, flagOffset) {\n\n    let flagByte = IodineGUI.Iodine.IOCore.cpu.read8(saveOffset + sectionOffset + Math.ceil((flagOffset + 1) / 8) - 1);\n    let flagBit = flagOffset % 8;\n\n    return !!+flagByte.toString(2).padStart(8, 0).split(\"\").reverse()[flagBit];\n}\n\nFlagManager.prototype.setFlag = function (saveOffset, sectionOffset, flagOffset, value) {\n\n    let flagByte = IodineGUI.Iodine.IOCore.cpu.read8(saveOffset + sectionOffset + Math.ceil((flagOffset + 1) / 8) - 1);\n    let flagBit = flagOffset % 8;\n\n    let byteArr = flagByte.toString(2).padStart(8, 0).split(\"\").reverse();\n    byteArr[flagBit] = value;\n\n    IodineGUI.Iodine.IOCore.cpu.write8(saveOffset + sectionOffset + Math.ceil((flagOffset + 1) / 8) - 1, parseInt(byteArr.reverse().join(\"\"), 2));\n\n}\n\nFlagManager.prototype.readFlags = function () {\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(EMERALD_SAVE_1_PTR);\n\n    this.badge1          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE1_OFFSET);\n    this.badge2          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE2_OFFSET);\n    this.badge3          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE3_OFFSET);\n    this.badge4          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE4_OFFSET);\n    this.badge5          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE5_OFFSET);\n    this.badge6          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE6_OFFSET);\n    this.badge7          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE7_OFFSET);\n    this.badge8          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE8_OFFSET);\n    this.hasRunningShoes = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_RUNNING_SHOE_OFFSET);\n}\n\nFlagManager.prototype.writeFlags = function () {\n\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(EMERALD_SAVE_1_PTR);\n\n    this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_RUNNING_SHOE_OFFSET, +this.hasRunningShoes);\n\n    // Open regi doors\n    this.setFlag(save1Start, EMERALD_BASE_FLAGS_OFFSET, 0xE4, 1);\n\n    // Not On Bike Path\n    modifySystemFlag(0x2B, 0);\n\n    // Open Sootopolis Gym Door\n    this.setFlag(save1Start, EMERALD_BASE_FLAGS_OFFSET, 0x9E, 1);\n\n    // Sootopolis always in nice state\n    writeGameVar(0x405E, 0);\n    this.setFlag(save1Start, EMERALD_BASE_FLAGS_OFFSET, 0x81, 1);\n\n    // Rae-Rae always available\n    writeGameVar(0x40D7, 0);\n    this.setFlag(save1Start, EMERALD_BASE_FLAGS_OFFSET, 0x50, 0);\n\n    // Show steven on the bridge\n    this.setFlag(save1Start, EMERALD_BASE_FLAGS_OFFSET, 0x3CC, 0);\n}\n\n\nfunction modifyBadge(badgeNumber, shouldGiveOrRemoveBit) {\n\n    modifySystemFlag(EMERALD_BADGE_OFFSETS[badgeNumber - 1], shouldGiveOrRemoveBit);\n\n}\n\nfunction modifyRunningShoes(shouldGiveOrRemoveBit) {\n\n    modifySystemFlag(EMERALD_RUNNING_SHOE_OFFSET, shouldGiveOrRemoveBit);\n\n}\n\nfunction modifySystemFlag(offset, shouldGiveOrRemoveBit) {\n\n    let manager = new FlagManager();\n    manager.readFlags();\n\n    let savePtr = EMERALD_SAVE_1_PTR;\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(savePtr);\n\n    let sysFlagOffset = EMERALD_SYS_FLAGS_OFFSET;\n\n    manager.setFlag(save1Start, sysFlagOffset, offset, shouldGiveOrRemoveBit);\n}\n\nfunction modifyBaseFlag(offset, shouldGiveOrRemoveBit) {\n\n    let manager = new FlagManager();\n    manager.readFlags();\n\n    let savePtr = EMERALD_SAVE_1_PTR;\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(savePtr);\n\n    let sysFlagOffset = EMERALD_BASE_FLAGS_OFFSET;\n\n    manager.setFlag(save1Start, sysFlagOffset, offset, shouldGiveOrRemoveBit);\n\n}\n\nfunction readSystemFlag(offset) {\n\n    let manager = new FlagManager();\n    manager.readFlags(game);\n\n    let savePtr = EMERALD_SAVE_1_PTR;\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(savePtr);\n\n    let sysFlagOffset = EMERALD_SYS_FLAGS_OFFSET;\n\n    return manager.getFlag(save1Start, sysFlagOffset, offset);\n\n}\nfunction writeGameVar(offset, data) {\n\n    let savePtr = EMERALD_SAVE_1_PTR;\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(savePtr);\n\n    let baseVarOffset = EMERALD_BASE_VAR_OFFSET;\n\n    IodineGUI.Iodine.IOCore.cpu.write16(save1Start + baseVarOffset + ((offset - 0x4000) * 2), data);\n}\n\nfunction readGameVar(offset) {\n\n    let savePtr = EMERALD_SAVE_1_PTR;\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(savePtr);\n\n    let baseVarOffset = EMERALD_BASE_VAR_OFFSET;\n\n    return IodineGUI.Iodine.IOCore.cpu.read16(save1Start + baseVarOffset + ((offset - 0x4000) * 2));\n}"],"names":["isWarping","randomWarpsEnabled","needsPositioningAfterWarp","EMERALD_CURRENT_BANK","EMERALD_CURRENT_MAP","EMERALD_CURRENT_WARP","X_VAL_POST_WARP","Y_VAL_POST_WARP","flagManager","SPEEDUP_HACKS_MODE","ON","BATTLE_ONLY","OFF","speedupHackState","setSpeedupHackState","mode","bypassWait","disableWaitCount","async","disableBypassWait","Math","max","delay","usingHomeWarp","GameBoyAdvanceCPU","prototype","write32WithoutIntercept","write32","address","data","this","write8","write16WithoutIntercept","write16","console","log","yLocation","write8WithoutIntercept","forceNextWarp","read8WithoutIntercept","read8","handleWarpRedirection","IodineGUI","Iodine","IOCore","cartridge","romCode","reverseNextWarp","bank","map","warpNo","writeGameVar","modifyBaseFlag","pkWarp","trigger","toParts","split","PKWarp","warpList","get","source","toParts1","toBank","toMap","toWarpNo","specialWarpHandling","toRomCode","warpsNeedingPositionForces","Map","set","escalatorTriggers","Set","pkwarp","destination","readGameVar","FlagManager","setFlag","cpu","read32","EMERALD_SAVE_1_PTR","has","writeFlags","add","MAP_TYPE_ADDRESS","MAP_TYPES","NONE","TOWN","CITY","ROUTE","UNDERGROUND","UNDERWATER","OCEAN_ROUTE","UNKNOWN","INDOOR","SECRET_BASE","isMapOutside","mapType","GameBoyAdvanceMultiCartridge","readROM16WithoutIntercept","readROM16","currentlySaving","saveAfterDelay","exportSave","readROM8WithoutIntercept","readROM8","GameBoyAdvanceSaves","saveIntercept","EMERALD_SAVE_2_PTR","EMERALD_BASE_FLAGS_OFFSET","EMERALD_SYS_FLAGS_OFFSET","EMERALD_BADGE1_OFFSET","EMERALD_BADGE2_OFFSET","EMERALD_BADGE3_OFFSET","EMERALD_BADGE4_OFFSET","EMERALD_BADGE5_OFFSET","EMERALD_BADGE6_OFFSET","EMERALD_BADGE7_OFFSET","EMERALD_BADGE8_OFFSET","EMERALD_RUNNING_SHOE_OFFSET","EMERALD_POKEDEX_OFFSET","EMERALD_NATIONAL_DEX_OFFSET","EMERALD_BADGE_OFFSETS","EMERALD_BASE_VAR_OFFSET","EMERALD_STARTER_CHOICE_OFFSET","badge1","badge2","badge3","badge4","badge5","badge6","badge7","badge8","hasRunningShoes","modifyBadge","badgeNumber","shouldGiveOrRemoveBit","modifySystemFlag","modifyRunningShoes","offset","manager","readFlags","savePtr","save1Start","readSystemFlag","game","getFlag","read16","saveOffset","sectionOffset","flagOffset","flagBit","ceil","toString","padStart","reverse","value","byteArr","parseInt","join"],"version":3,"file":"build-index.f8926b00.js.map"}