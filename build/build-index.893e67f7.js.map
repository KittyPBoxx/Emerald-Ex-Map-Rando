{"mappings":"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","sources":["dist/CoreHacks/EmulationCoreHacks.js"],"sourcesContent":["/**\n * Random Warp Script\n */\nvar isWarping = false;\nvar randomWarpsEnabled = true;\nvar needsPositioningAfterWarp = false;\nvar fromEscalator = false;\nvar mapHeaderChanged = false;\n\nvar autosaveState = 0;\n\n/******************/\n/* Warp Addresses */\n/******************/\n/**\n *  Order of events for a warp script\n * \n *  1) A player steps on a warp tile\n *  2) A write8 is perforemed to bank, then map, then warp for current game\n *  3) Several read8s are performed to bank, then map, then warp \n *  4) Exit animation is played (i.e walking through a door) and screen fades to black\n *  5) A write32 is done to the last bank address\n *  6) New map is loaded and fades in then enterance animation is played \n * \n *  Warp flow:\n * \n *  Within game:\n *  Wait for write to warp address -> \n *  switch to warping state -> \n *  wait for next read from warp address -> \n *  before reading overwrite it -> \n *  update flags e.t.c\n *  continue  \n */\nconst EMERALD_CURRENT_BANK = 0x2032ee4;\nconst EMERALD_CURRENT_MAP  = 0x2032ee5;\nconst EMERALD_CURRENT_WARP = 0x2032ee6;\n\n// These are from the normally dynamic save block \n// gSaveBlock1Ptr->location.x e.t.c\nconst X_VAL_POST_WARP = 0x02026688;\nconst Y_VAL_POST_WARP = 0x0202668A;\n\nvar flagManager; // only global to help debugging\n\nconst SPEEDUP_HACKS_MODE = { ON: 2, BATTLE_ONLY: 1, OFF: 0}\nvar speedupHackState = SPEEDUP_HACKS_MODE.ON;\n\nfunction setSpeedupHackState(mode) {\n    if (mode == SPEEDUP_HACKS_MODE.ON) {\n        bypassWait = true;\n        speedupHackState = SPEEDUP_HACKS_MODE.ON\n    } else if (mode == SPEEDUP_HACKS_MODE.BATTLE_ONLY) {\n        bypassWait = false;\n        speedupHackState = SPEEDUP_HACKS_MODE.BATTLE_ONLY;\n    } else if (mode == SPEEDUP_HACKS_MODE.OFF) {\n        bypassWait = false;\n        speedupHackState = SPEEDUP_HACKS_MODE.OFF;\n    }\n}\n\nvar disableWaitCount = 0;\nasync function disableBypassWait() {\n    bypassWait = false;\n    disableWaitCount = Math.max(disableWaitCount + 1, 2);\n    while(disableWaitCount > 0 ) {\n        await delay(500);\n        disableWaitCount--\n    }\n    disableWaitCount = 0;\n    bypassWait = true;\n}\n\nvar usingHomeWarp = false;\nGameBoyAdvanceCPU.prototype.write32WithoutIntercept = GameBoyAdvanceCPU.prototype.write32;\nGameBoyAdvanceCPU.prototype.write32 = function (address, data) { \n\n\n    if (address == 0x2037f18 && needsPositioningAfterWarp) {\n        // ensure gMapHeader has changed before we try and fix the players position \n        mapHeaderChanged = true;\n    } else if (address == 0x2037f18 && autosaveState == 1) {\n        IodineGUI.Iodine.saveStateManager.saveMultiState(\"LATEST\");\n        autosaveState = 0;\n    }\n\n    if (address == 0x02038c5c && speedupHackState == SPEEDUP_HACKS_MODE.ON) {\n        if (data == -1) {\n            disableBypassWait();\n        }\n    } else if (address == 0x02020004) {\n        // Make emulation more accurate :/\n        data = 0;\n    } else if (address == 0x02025364 && speedupHackState == SPEEDUP_HACKS_MODE.BATTLE_ONLY) {\n        bypassWait = true;\n    }    \n\n    if (usingHomeWarp && address == EMERALD_CURRENT_BANK){\n        this.write8(EMERALD_CURRENT_BANK, 0);\n        this.write8(EMERALD_CURRENT_MAP, 10);\n        this.write8(EMERALD_CURRENT_WARP, 5);\n        needsPositioningAfterWarp = warpsNeedingPositionForces.get(\"E,0,10,5\");\n        usingHomeWarp = false;\n        return;\n    }\n\n    this.write32WithoutIntercept(address, data);\n}\n\nGameBoyAdvanceCPU.prototype.write16WithoutIntercept = GameBoyAdvanceCPU.prototype.write16;\nGameBoyAdvanceCPU.prototype.write16 = function (address, data) { \n\n    if (needsPositioningAfterWarp && mapHeaderChanged) {\n        if (address == X_VAL_POST_WARP) {\n    \n            return this.write16WithoutIntercept(address, needsPositioningAfterWarp[0]);\n    \n        } else if (address == Y_VAL_POST_WARP) {\n    \n            console.log(\"finished warp setting position after\")\n            let yLocation = needsPositioningAfterWarp[1];\n            needsPositioningAfterWarp = false;\n            mapHeaderChanged = false;\n            return this.write16WithoutIntercept(address, yLocation);\n        }\n    } else if (fromEscalator) {\n        if (address == X_VAL_POST_WARP) {\n    \n            fromEscalator = false;\n            data = data - 1;\n    \n        }\n    }\n\n    this.write16WithoutIntercept(address, data);\n}\n\n GameBoyAdvanceCPU.prototype.write8WithoutIntercept = GameBoyAdvanceCPU.prototype.write8;\n GameBoyAdvanceCPU.prototype.write8 = function (address, data) { \n\n    if (address == EMERALD_CURRENT_WARP){\n        isWarping = randomWarpsEnabled || forceNextWarp;\n    } else if (address == 0x02024f0e && data != 0 && speedupHackState == SPEEDUP_HACKS_MODE.BATTLE_ONLY) {\n        bypassWait = false;\n    }\n    \n    this.write8WithoutIntercept(address, data);\n }\n\nGameBoyAdvanceCPU.prototype.read8WithoutIntercept = GameBoyAdvanceCPU.prototype.read8;\nGameBoyAdvanceCPU.prototype.read8 = function (address) {\n\n    if (!isWarping) return this.read8WithoutIntercept(address);\n\n    if (address == EMERALD_CURRENT_BANK) \n    {\n        address = this.handleWarpRedirection(address, IodineGUI.Iodine.IOCore.cartridge.romCode);\n    }\n\n    return this.read8WithoutIntercept(address);\n}\n\nvar reverseNextWarp = false; // Set true when loading a save state that was going through a warp\nvar forceNextWarp = null;\nvar useAutosaves = false;\nGameBoyAdvanceCPU.prototype.handleWarpRedirection = function (address, romCode) {\n\n    let bank = this.read8WithoutIntercept(address);\n    let map = this.read8WithoutIntercept(address + 1);\n    let warpNo = this.read8WithoutIntercept(address + 2);\n    \n    if (warpNo == 255) { \n\n        // Special Fix for norman after the tutorial\n        if (romCode + \",\" + bank + \",\" + map + \",\" + warpNo == \"E,8,1,255\") {\n            writeGameVar(0x4085, 6);\n            modifyBaseFlag(0x2D6, 1);\n            modifyBaseFlag(0x362, 1);\n        }\n\n        // Avoid scripted warps, route connections without zone e.t.c\n        return address; \n    }\n\n    let pkWarp = null;\n    let trigger = romCode + \",\" + bank + \",\" + map + \",\" + warpNo;\n\n    if (forceNextWarp) {\n        let toParts = forceNextWarp.split(\",\");\n        pkWarp = new PKWarp(trigger, toParts[0], toParts[1], toParts[2], toParts[3], forceNextWarp)\n        reverseNextWarp = false;\n        forceNextWarp = null;\n    } else if(reverseNextWarp && warpList.get(trigger)) {\n        let source = warpList.get(trigger).source;\n        let toParts = source.split(\",\");\n        pkWarp = new PKWarp(trigger, toParts[0], toParts[1], toParts[2], toParts[3], source)\n        reverseNextWarp = false;\n    } else {\n        pkWarp = warpList.get(trigger);\n        console.log(\"Warping triggered for \" + trigger); \n    }\n\n    if (pkWarp) {\n\n        this.write8(EMERALD_CURRENT_BANK, pkWarp.toBank);\n        this.write8(EMERALD_CURRENT_MAP, pkWarp.toMap);\n        this.write8(EMERALD_CURRENT_WARP, pkWarp.toWarpNo);\n\n        specialWarpHandling(pkWarp, trigger);\n\n        console.log(\"Warping sending to \" + pkWarp.toRomCode + \",\" + pkWarp.toBank + \",\" + pkWarp.toMap + \",\" + pkWarp.toWarpNo); \n    } else {\n        console.log(\"Warping sending to vanilla\"); \n    }\n\n    if (useAutosaves) {\n        autosaveState = 1;\n    }\n    \n    \n    isWarping = false;\n\n    return address;\n}\n\nvar warpsNeedingPositionForces = new Map();\nwarpsNeedingPositionForces.set(\"E,0,1,5\"    , [0x1E, 0x1B]);\nwarpsNeedingPositionForces.set(\"E,0,5,0\"    , [0x1B, 0x07]);\nwarpsNeedingPositionForces.set(\"E,0,2,0\"    , [0x08, 0x06]);\nwarpsNeedingPositionForces.set(\"E,0,7,5\"    , [0x2D, 0x07]);\nwarpsNeedingPositionForces.set(\"E,0,7,9\"    , [0x35, 0x1D]);\nwarpsNeedingPositionForces.set(\"E,0,7,4\"    , [0x09, 0x07]);\nwarpsNeedingPositionForces.set(\"E,0,8,2\"    , [0x12, 0x2A]);\nwarpsNeedingPositionForces.set(\"E,0,11,3\"   , [0x11, 0x0E]);\nwarpsNeedingPositionForces.set(\"E,0,12,5\"   , [0x09, 0x02]);\nwarpsNeedingPositionForces.set(\"E,0,14,4\"   , [0x08, 0x02]);\nwarpsNeedingPositionForces.set(\"E,0,15,0\"   , [0x08, 0x10]);\nwarpsNeedingPositionForces.set(\"E,0,26,0\"   , [0x0D, 0x72]);\nwarpsNeedingPositionForces.set(\"E,11,0,2\"   , [0x0E, 0x02]);\nwarpsNeedingPositionForces.set(\"E,14,9,2\"   , [0x0D, 0x02]);\nwarpsNeedingPositionForces.set(\"E,14,10,2\"  , [0x0d, 0x02]);\nwarpsNeedingPositionForces.set(\"E,16,10,2\"  , [0x09, 0x02]);\nwarpsNeedingPositionForces.set(\"E,24,8,2\"   , [0x1D, 0x0D]);\nwarpsNeedingPositionForces.set(\"E,24,8,3\"   , [0x1C, 0x15]);\nwarpsNeedingPositionForces.set(\"E,24,9,0\"   , [0x1D, 0x0D]);\nwarpsNeedingPositionForces.set(\"E,24,9,1\"   , [0x1C, 0x15]);\nwarpsNeedingPositionForces.set(\"E,24,13,4\"  , [0x10, 0x13]);\nwarpsNeedingPositionForces.set(\"E,24,16,4\"  , [0x0B, 0x09]);\nwarpsNeedingPositionForces.set(\"E,24,16,2\"  , [0x0A, 0x0C]);\nwarpsNeedingPositionForces.set(\"E,24,17,5\"  , [0x06, 0x0C]);\nwarpsNeedingPositionForces.set(\"E,24,17,4\"  , [0x0A, 0x0C]);\nwarpsNeedingPositionForces.set(\"E,24,18,2\"  , [0x0C, 0x0A]);\nwarpsNeedingPositionForces.set(\"E,24,18,3\"  , [0x0C, 0x0C]);\nwarpsNeedingPositionForces.set(\"E,24,19,3\"  , [0x0C, 0x0A]);\nwarpsNeedingPositionForces.set(\"E,24,19,4\"  , [0x0C, 0x0C]);\nwarpsNeedingPositionForces.set(\"E,24,24,10\" , [0x20, 0x13]);\nwarpsNeedingPositionForces.set(\"E,24,25,5\"  , [0x05, 0x08]);\nwarpsNeedingPositionForces.set(\"E,24,25,9\"  , [0x20, 0x14]);\nwarpsNeedingPositionForces.set(\"E,24,29,2\"  , [0x06, 0x01]);\nwarpsNeedingPositionForces.set(\"E,24,78,0\"  , [0x11, 0x0D]);\nwarpsNeedingPositionForces.set(\"E,24,81,0\"  , [0x03, 0x01]);\nwarpsNeedingPositionForces.set(\"E,24,82,1\"  , [0x07, 0x01]);\nwarpsNeedingPositionForces.set(\"E,24,95,0\"  , [0x12, 0x0C]);\nwarpsNeedingPositionForces.set(\"E,24,96,0\"  , [0x12, 0x0C]);\nwarpsNeedingPositionForces.set(\"E,26,74,1\"  , [0x05, 0x05]);\nwarpsNeedingPositionForces.set(\"E,26,87,0\"  , [0x0E, 0x13]);\nwarpsNeedingPositionForces.set(\"E,0,10,5\"   , [0x0A, 0x09]);\nwarpsNeedingPositionForces.set(\"E,16,0,1\"   , [0x06, 0x03]);\nwarpsNeedingPositionForces.set(\"E,16,1,1\"   , [0x06, 0x03]);\nwarpsNeedingPositionForces.set(\"E,16,2,1\"   , [0x06, 0x03]);\nwarpsNeedingPositionForces.set(\"E,16,3,1\"   , [0x06, 0x03]);\n\n// OLDALE WARP\nwarpsNeedingPositionForces.set(\"E,11,2,0\"   , [0x02, 0x02]);\n\nvar escalatorTriggers = new Set();\nescalatorTriggers.add(\"E,8,5,0\"  );\nescalatorTriggers.add(\"E,9,12,0\" );\nescalatorTriggers.add(\"E,10,6,0\" );\nescalatorTriggers.add(\"E,11,6,0\" );\nescalatorTriggers.add(\"E,12,3,0\" );\nescalatorTriggers.add(\"E,13,7,0\" );\nescalatorTriggers.add(\"E,14,4,0\" );\nescalatorTriggers.add(\"E,15,3,0\" );\nescalatorTriggers.add(\"E,16,13,0\");\nescalatorTriggers.add(\"E,16,14,0\");\nescalatorTriggers.add(\"E,2,3,0\"  );\nescalatorTriggers.add(\"E,3,2,0\"  );\nescalatorTriggers.add(\"E,4,6,0\"  );\nescalatorTriggers.add(\"E,5,5,0\"  );\nescalatorTriggers.add(\"E,6,5,0\"  );\nescalatorTriggers.add(\"E,7,1,0\"  );\n\n/*\n*   DuringWarp handling takes place before the warp had happened but after the new rom has been loaded\n*   This is useful for when you need to set a flag/var in  a game you are loading before the new map loads\n*/\nfunction specialWarpHandling(pkwarp, trigger) {\n    \n    let destination = pkwarp.toRomCode + \",\" + pkwarp.toBank + \",\" + pkwarp.toMap + \",\" + pkwarp.toWarpNo;\n\n    // If Petalburg Gym make either catch tutorial or battle\n    if (destination == \"E,8,1,0\") {\n        // If catch tutorial hasn't been done we set to that\n        // otherwise we set to battle state\n        let normanState = readGameVar(0x4075);\n        if (normanState < 2) {\n            writeGameVar(0x4085, 0)\n        } else {\n            writeGameVar(0x4085, 6)\n        }\n\n        // Unlock left of petalburg\n        writeGameVar(0x4057, 1);\n\n    } else if (destination == \"E,16,0,0\") {\n        // E4 rooms needs to walk fowards when entering\n        writeGameVar(0x409C, 0);\n    } else if (destination == \"E,16,0,1\")  {\n        writeGameVar(0x409C, 1);\n    } else if (destination == \"E,16,1,0\") {\n        writeGameVar(0x409C, 1);\n    } else if (destination == \"E,16,1,1\") {\n        writeGameVar(0x409C, 2);\n    } else if (destination == \"E,16,2,0\") {\n        writeGameVar(0x409C, 2);\n    } else if (destination == \"E,16,2,1\") {\n        writeGameVar(0x409C, 3);\n    } else if (destination == \"E,16,3,0\") {\n        writeGameVar(0x409C, 3);\n    } else if (destination == \"E,16,3,1\") {\n        writeGameVar(0x409C, 4);\n    } else  if (destination == \"E,10,0,0\") {\n        // If Mauville Gym make battle\n        new FlagManager().setFlag(IodineGUI.Iodine.IOCore.cpu.read32(EMERALD_SAVE_1_PTR), 0x1270, 0x391, 0);\n    } else if (destination == \"E,29,1,0\" || destination == \"E,29,1,1\") {\n        // Make Sure the trick master won't crash the game\n        if (readGameVar(\"E\", 0x4044) > 7) {\n            writeGameVar(\"E\", 0x4044, 7);\n        }\n    } \n    \n    if (warpsNeedingPositionForces.get(destination)) {\n\n        // Some warps will break expected connections if we use an escalator / teleport \n        // so we need to fix the post warp position manually\n        \n        needsPositioningAfterWarp = [...warpsNeedingPositionForces.get(destination)];\n\n        // If the trigger was an escalator we need to apply the movement script to the position correction  \n        if (escalatorTriggers.has(trigger)) {\n            needsPositioningAfterWarp[0]--;\n        }\n        \n    } else if (escalatorTriggers.has(trigger)) {\n\n        // In general if it's from an escalator we move the warp left 1 even if it's not a special warp\n\n        fromEscalator = true;\n\n    }\n\n\n    let bagManager = new BagStoreage();\n    bagManager.readData();\n    new FlagManager(bagManager).writeFlags();\n}\n\n/***********************/\n/* Dynamic rom patches */  \n/***********************/\n\n\nconst MAP_TYPE_ADDRESS = 0x2037f2f;\nconst MAP_TYPES = {\n    NONE       : 0,\n    TOWN       : 1,\n    CITY       : 2,\n    ROUTE      : 3,\n    UNDERGROUND: 4,\n    UNDERWATER : 5,\n    OCEAN_ROUTE: 6,\n    UNKNOWN    : 7, // Not used by any map.\n    INDOOR     : 8,\n    SECRET_BASE: 9\n};\n\nfunction isMapOutside() {\n    let mapType = IodineGUI.Iodine.IOCore.cpu.read8(MAP_TYPE_ADDRESS);\n    return mapType == MAP_TYPES.NONE ||\n           mapType == MAP_TYPES.TOWN ||\n           mapType == MAP_TYPES.CITY ||\n           mapType == MAP_TYPES.ROUTE ||\n           mapType == MAP_TYPES.UNDERWATER ||\n           mapType == MAP_TYPES.OCEAN_ROUTE;\n}\n\nGameBoyAdvanceMultiCartridge.prototype.readROM16WithoutIntercept = GameBoyAdvanceMultiCartridge.prototype.readROM16;\nGameBoyAdvanceMultiCartridge.prototype.readROM16 = function (address) {\n    \n    if (address == 0xb9f78) {\n        console.log(\"Destination to escape warp\");\n\n        if (isMapOutside()) {\n            usingHomeWarp = true;\n        }\n    }   \n\n    return this.readROM16WithoutIntercept(address);\n}\n\nvar currentlySaving = false;\nGameBoyAdvanceMultiCartridge.prototype.readROM8WithoutIntercept = GameBoyAdvanceMultiCartridge.prototype.readROM8;\nGameBoyAdvanceMultiCartridge.prototype.readROM8 = function (address) {\n\n    if (currentlySaving) {\n        if ((address == 3084361 || address == 8455992)) {\n            console.log(\"saved\");\n            saveAfterDelay();\n            currentlySaving = false;\n        }\n    }\n\n    return this.readROM8WithoutIntercept(address);\n}\n\nasync function saveAfterDelay() {\n    await delay(200);\n    IodineGUI.Iodine.exportSave();\n}\n\nGameBoyAdvanceSaves.prototype.saveIntercept = function(address, data) {\n    if (address == 0 && data == 48) {\n        currentlySaving = true;\n    } \n}\n\n/******************/\n/* Data Addresses */\n/******************/\n/**\n *  Addresses for save data, Team is not copied here because we use where it is statically stored in memory\n *  Addresses are offsets from the 32bit addresses that can be found using the pointers (ptr locations are static)\n *  Money is xor'd against 32bit xor key, item quantity is xor'd against the first 2 bytes of that key.\n *  \n *  Dynamicly Addressed memory means the three sections of data move in memory (hence we need to look the up with ptrs)\n *  These change each time the bag is accessed or a warp is triggered (and at various other times)\n * \n *  There are 3 dynamic sections. SAV1 (mostly relating to team and items)\n *  SAV2 (storing the xor key, and trainer data, play time, settings, seen mons e.t.c)\n *  We don't deal with SAV3 but it's mostly boxed pokemon / box config   \n */\n\n\n// DYNAMIC SAV1 PTRs\nconst EMERALD_SAVE_1_PTR = 0x03004cac;\n\n// DYNAMIC SAV2 PTRs\nconst EMERALD_SAVE_2_PTR = 0x03004cb0;\n\n\n/**************************/\n/* Bag Storage Management */\n/**************************/\n/**\n * \n *  Bag storeage requires special handling as quantities are xor'd with a special key \n *  that changes and will be different for each game\n *\n */\n\n// XOR Key\nconst EMERALD_XOR_KEY_OFFSET = 0xAC;\nconst EMERALD_XOR_KEY_LENGTH = 4;\n\n// ITEM POCKET\nconst EMERALD_ITEM_OFFSET = 0x0560;\nconst EMERALD_ITEM_LENGTH = 120;\n\n// KEY ITEM POCKET\nconst EMERALD_KEY_ITEM_OFFSET = 0x05D8;\nconst EMERALD_KEY_ITEM_LENGTH = 120;\n\n// BALLS\nconst EMERALD_BALL_OFFSET = 0x0650;\nconst EMERALD_BALL_LENGTH = 64;\n\n// TM Case\nconst EMERALD_TM_OFFSET = 0x0690;\nconst EMERALD_TM_LENGTH = 256;\n\n// Berry Pocket\nconst EMERALD_BERRIES_OFFSET = 0x0790;\nconst EMERALD_BERRIES_LENGTH = 184;\n\n\nfunction BagStoreage() {\n\n    //this.pcItems = new Map();\n    this.itemPocket = new Map();\n    this.keyItemsPocket = new Map();\n    this.ballItemPocket = new Map();\n    this.tmCase = new Map();\n    this.berryPocket = new Map();\n}\n\n\nBagStoreage.prototype.readData = function () {\n    this.itemPocket.clear();\n    this.keyItemsPocket.clear();\n    this.ballItemPocket.clear();\n    this.tmCase.clear();\n    this.berryPocket.clear();\n\n    let save2Start = IodineGUI.Iodine.IOCore.cpu.read32(EMERALD_SAVE_2_PTR);\n    let xorKey16 = IodineGUI.Iodine.IOCore.cpu.read16(save2Start + EMERALD_XOR_KEY_OFFSET);\n\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(EMERALD_SAVE_1_PTR);\n\n    // read items\n    this.readItemSection(save1Start, EMERALD_ITEM_OFFSET, EMERALD_ITEM_LENGTH, this.itemPocket, xorKey16);\n\n    // read key items\n    this.readItemSection(save1Start, EMERALD_KEY_ITEM_OFFSET, EMERALD_KEY_ITEM_LENGTH, this.keyItemsPocket, xorKey16);\n\n    // read balls\n    this.readItemSection(save1Start, EMERALD_BALL_OFFSET, EMERALD_BALL_LENGTH, this.ballItemPocket, xorKey16);\n\n    // read tms\n    this.readItemSection(save1Start, EMERALD_TM_OFFSET, EMERALD_TM_LENGTH, this.tmCase, xorKey16);\n\n    // read berries\n    this.readItemSection(save1Start, EMERALD_BERRIES_OFFSET, EMERALD_BERRIES_LENGTH, this.berryPocket, xorKey16);\n}\n\nBagStoreage.prototype.writeData = function (isLoadingScreen) {\n    let save2Start = IodineGUI.Iodine.IOCore.cpu.read32(EMERALD_SAVE_2_PTR);\n    let xorKey16 = IodineGUI.Iodine.IOCore.cpu.read16(save2Start + EMERALD_XOR_KEY_OFFSET);\n\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(EMERALD_SAVE_1_PTR);\n\n    // write items\n    this.writeItemSection(save1Start, EMERALD_ITEM_OFFSET, EMERALD_ITEM_LENGTH, this.itemPocket, xorKey16, isLoadingScreen);\n\n    // write key items\n    this.writeItemSection(save1Start, EMERALD_KEY_ITEM_OFFSET, EMERALD_KEY_ITEM_LENGTH, this.keyItemsPocket, xorKey16, false);\n\n    // write balls\n    this.writeItemSection(save1Start, EMERALD_BALL_OFFSET, EMERALD_BALL_LENGTH, this.ballItemPocket, xorKey16, isLoadingScreen);\n\n    // write tms\n    this.writeItemSection(save1Start, EMERALD_TM_OFFSET, EMERALD_TM_LENGTH, this.tmCase, xorKey16, isLoadingScreen);\n\n    // write berries\n    this.writeItemSection(save1Start, EMERALD_BERRIES_OFFSET, EMERALD_BERRIES_LENGTH, this.berryPocket, xorKey16, isLoadingScreen);\n}\n\nBagStoreage.prototype.readItemSection = function(save1Start, offset, length, storeTo, xorKey16) {\n    for (let i = 0;  i < offset + length; i+=4) {\n        let item = IodineGUI.Iodine.IOCore.cpu.read16(save1Start + offset + i);\n\n        if (item == 0) { break; }\n\n        let ballQuantity = IodineGUI.Iodine.IOCore.cpu.read16(save1Start + offset + i + 2) ^ xorKey16;\n        storeTo.set(item, ballQuantity);\n    }\n}\n\nBagStoreage.prototype.writeItemSection = function(save1Start, offset, length, store, xorKey16, clear) {\n\n    var storeArr = [...store];\n\n    for (let i = 0;  i < offset + length; i+=4) {\n\n        let index = i / 4;\n        if (storeArr.length > index) {\n\n            let item = (storeArr[i / 4])[0];\n            let quantity = (storeArr[i / 4])[1] ^ xorKey16;\n\n            IodineGUI.Iodine.IOCore.cpu.write16(save1Start + offset + i, item);\n            IodineGUI.Iodine.IOCore.cpu.write16(save1Start + offset + i + 2, quantity);\n\n        } else {\n\n            // No more items to copy\n            if(clear) {\n                let item = ITEM_DATA.Nothing.number;\n                let quantity = 0 ^ xorKey16;\n                \n                IodineGUI.Iodine.IOCore.cpu.write16(save1Start + offset + i, item);\n                IodineGUI.Iodine.IOCore.cpu.write16(save1Start + offset + i + 2, quantity);\n            } else {\n                break;\n            }\n        }\n    }\n}\n\nBagStoreage.prototype.hasKeyItem = function(item) {\n    return this.keyItemsPocket.has(item);\n}\n\n/*******************/\n/* Flag Management */\n/*******************/\n\n// This handles any general vars/flags that need to be transfered when switching games\n\n// IN DYNAMIC SAV1\n// The equations are so the offsets line up the the flags defined in the decomp projects\n// https://github.com/pret/pokeemerald/blob/master/include/constants/flags.h\n// https://github.com/pret/pokeemerald/blob/master/include/constants/vars.h\nconst EMERALD_BASE_FLAGS_OFFSET   = 0x1270;\nconst EMERALD_SYS_FLAGS_OFFSET    = 0x137C;\nconst EMERALD_BADGE1_OFFSET       = 0x7;\nconst EMERALD_BADGE2_OFFSET       = 0x8;\nconst EMERALD_BADGE3_OFFSET       = 0x9;\nconst EMERALD_BADGE4_OFFSET       = 0xA;\nconst EMERALD_BADGE5_OFFSET       = 0xB;\nconst EMERALD_BADGE6_OFFSET       = 0xC;\nconst EMERALD_BADGE7_OFFSET       = 0xD;\nconst EMERALD_BADGE8_OFFSET       = 0xE;\nconst EMERALD_RUNNING_SHOE_OFFSET = 0x60;\nconst EMERALD_POKEDEX_OFFSET      = 0x1; \nconst EMERALD_NATIONAL_DEX_OFFSET = 0x36;\nconst EMERALD_BADGE_OFFSETS = [EMERALD_BADGE1_OFFSET, \n                               EMERALD_BADGE2_OFFSET, \n                               EMERALD_BADGE3_OFFSET, \n                               EMERALD_BADGE4_OFFSET, \n                               EMERALD_BADGE5_OFFSET, \n                               EMERALD_BADGE6_OFFSET, \n                               EMERALD_BADGE7_OFFSET, \n                               EMERALD_BADGE8_OFFSET];\n\nconst EMERALD_BASE_VAR_OFFSET = 0x139c;\n\nconst EMERALD_STARTER_CHOICE_OFFSET = 0x4023;\n\nfunction FlagManager(bag) {\n    this.badge1 = null;\n    this.badge2 = null;\n    this.badge3 = null;\n    this.badge4 = null;\n    this.badge5 = null;\n    this.badge6 = null;\n    this.badge7 = null;\n    this.badge8 = null;\n    this.hasRunningShoes = null;\n    this.bag = bag;\n}\n\nFlagManager.prototype.getFlag = function (saveOffset, sectionOffset, flagOffset) {\n\n    let flagByte = IodineGUI.Iodine.IOCore.cpu.read8(saveOffset + sectionOffset + Math.ceil((flagOffset + 1) / 8) - 1);\n    let flagBit = flagOffset % 8;\n\n    return !!+flagByte.toString(2).padStart(8, 0).split(\"\").reverse()[flagBit];\n}\n\nFlagManager.prototype.setFlag = function (saveOffset, sectionOffset, flagOffset, value) {\n\n    let flagByte = IodineGUI.Iodine.IOCore.cpu.read8(saveOffset + sectionOffset + Math.ceil((flagOffset + 1) / 8) - 1);\n    let flagBit = flagOffset % 8;\n\n    let byteArr = flagByte.toString(2).padStart(8, 0).split(\"\").reverse();\n    byteArr[flagBit] = value;\n\n    IodineGUI.Iodine.IOCore.cpu.write8(saveOffset + sectionOffset + Math.ceil((flagOffset + 1) / 8) - 1, parseInt(byteArr.reverse().join(\"\"), 2));\n\n}\n\nFlagManager.prototype.readFlags = function () {\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(EMERALD_SAVE_1_PTR);\n\n    this.badge1          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE1_OFFSET);\n    this.badge2          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE2_OFFSET);\n    this.badge3          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE3_OFFSET);\n    this.badge4          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE4_OFFSET);\n    this.badge5          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE5_OFFSET);\n    this.badge6          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE6_OFFSET);\n    this.badge7          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE7_OFFSET);\n    this.badge8          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE8_OFFSET);\n    this.hasRunningShoes = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_RUNNING_SHOE_OFFSET);\n}\n\nFlagManager.prototype.writeFlags = function () {\n\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(EMERALD_SAVE_1_PTR);\n\n    this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_RUNNING_SHOE_OFFSET, +this.hasRunningShoes);\n\n    // Open regi doors\n    this.setFlag(save1Start, EMERALD_BASE_FLAGS_OFFSET, 0xE4, 1);\n\n    // Not On Bike Path\n    modifySystemFlag(0x2B, 0);\n\n    // Open Sootopolis Gym Door\n    this.setFlag(save1Start, EMERALD_BASE_FLAGS_OFFSET, 0x9E, 1);\n\n    // Sootopolis always in nice state\n    writeGameVar(0x405E, 0);\n    this.setFlag(save1Start, EMERALD_BASE_FLAGS_OFFSET, 0x81, 1);\n\n    // Rae-Rae always available\n    writeGameVar(0x40D7, 0);\n    this.setFlag(save1Start, EMERALD_BASE_FLAGS_OFFSET, 0x50, 0);\n\n    // Show steven on the bridge\n    if (!this.bag.hasKeyItem(ITEM_DATA[\"DEVON SCOPE\"].number)) {\n        this.setFlag(save1Start, EMERALD_BASE_FLAGS_OFFSET, 0x3CC, 0);\n    }\n    \n    // Make sure the magma embelem can always be got\n    if (!this.bag.hasKeyItem(ITEM_DATA[\"MAGMA EMBLEM\"].number)) {\n        writeGameVar(0x40B9, 0);\n    } else {\n        // Hide Jagged Pass Magma guard if we have magma emblem\n        this.setFlag(save1Start, EMERALD_BASE_FLAGS_OFFSET, 0x34F, 1);\n    }\n    \n}\n\n\nfunction modifyBadge(badgeNumber, shouldGiveOrRemoveBit) {\n\n    modifySystemFlag(EMERALD_BADGE_OFFSETS[badgeNumber - 1], shouldGiveOrRemoveBit);\n\n}\n\nfunction modifyRunningShoes(shouldGiveOrRemoveBit) {\n\n    modifySystemFlag(EMERALD_RUNNING_SHOE_OFFSET, shouldGiveOrRemoveBit);\n\n}\n\nfunction modifySystemFlag(offset, shouldGiveOrRemoveBit) {\n\n    let manager = new FlagManager();\n    manager.readFlags();\n\n    let savePtr = EMERALD_SAVE_1_PTR;\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(savePtr);\n\n    let sysFlagOffset = EMERALD_SYS_FLAGS_OFFSET;\n\n    manager.setFlag(save1Start, sysFlagOffset, offset, shouldGiveOrRemoveBit);\n}\n\nfunction modifyBaseFlag(offset, shouldGiveOrRemoveBit) {\n\n    let manager = new FlagManager();\n    manager.readFlags();\n\n    let savePtr = EMERALD_SAVE_1_PTR;\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(savePtr);\n\n    let sysFlagOffset = EMERALD_BASE_FLAGS_OFFSET;\n\n    manager.setFlag(save1Start, sysFlagOffset, offset, shouldGiveOrRemoveBit);\n\n}\n\nfunction readSystemFlag(offset) {\n\n    let manager = new FlagManager();\n    manager.readFlags(game);\n\n    let savePtr = EMERALD_SAVE_1_PTR;\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(savePtr);\n\n    let sysFlagOffset = EMERALD_SYS_FLAGS_OFFSET;\n\n    return manager.getFlag(save1Start, sysFlagOffset, offset);\n\n}\n\nfunction readBaseFlag(offset) {\n\n    let manager = new FlagManager();\n    manager.readFlags(game);\n\n    let savePtr = EMERALD_SAVE_1_PTR;\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(savePtr);\n\n    let sysFlagOffset = EMERALD_BASE_FLAGS_OFFSET;\n\n    return manager.getFlag(save1Start, sysFlagOffset, offset);\n\n}\n\nfunction writeGameVar(offset, data) {\n\n    let savePtr = EMERALD_SAVE_1_PTR;\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(savePtr);\n\n    let baseVarOffset = EMERALD_BASE_VAR_OFFSET;\n\n    IodineGUI.Iodine.IOCore.cpu.write16(save1Start + baseVarOffset + ((offset - 0x4000) * 2), data);\n}\n\nfunction readGameVar(offset) {\n\n    let savePtr = EMERALD_SAVE_1_PTR;\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(savePtr);\n\n    let baseVarOffset = EMERALD_BASE_VAR_OFFSET;\n\n    return IodineGUI.Iodine.IOCore.cpu.read16(save1Start + baseVarOffset + ((offset - 0x4000) * 2));\n}"],"names":["isWarping","randomWarpsEnabled","needsPositioningAfterWarp","fromEscalator","mapHeaderChanged","autosaveState","EMERALD_CURRENT_BANK","EMERALD_CURRENT_MAP","EMERALD_CURRENT_WARP","X_VAL_POST_WARP","Y_VAL_POST_WARP","flagManager","SPEEDUP_HACKS_MODE","ON","BATTLE_ONLY","OFF","speedupHackState","setSpeedupHackState","mode","bypassWait","disableWaitCount","async","disableBypassWait","Math","max","delay","usingHomeWarp","GameBoyAdvanceCPU","prototype","write32WithoutIntercept","write32","address","data","IodineGUI","Iodine","saveStateManager","saveMultiState","this","write8","warpsNeedingPositionForces","get","write16WithoutIntercept","write16","console","log","yLocation","write8WithoutIntercept","forceNextWarp","read8WithoutIntercept","read8","handleWarpRedirection","IOCore","cartridge","romCode","reverseNextWarp","useAutosaves","bank","map","warpNo","writeGameVar","modifyBaseFlag","pkWarp","trigger","toParts","split","PKWarp","warpList","source","toParts1","toBank","toMap","toWarpNo","specialWarpHandling","toRomCode","Map","set","escalatorTriggers","Set","pkwarp","destination","readGameVar","FlagManager","setFlag","cpu","read32","EMERALD_SAVE_1_PTR","has","bagManager","BagStoreage","readData","writeFlags","add","MAP_TYPE_ADDRESS","MAP_TYPES","NONE","TOWN","CITY","ROUTE","UNDERGROUND","UNDERWATER","OCEAN_ROUTE","UNKNOWN","INDOOR","SECRET_BASE","isMapOutside","mapType","GameBoyAdvanceMultiCartridge","readROM16WithoutIntercept","readROM16","currentlySaving","saveAfterDelay","exportSave","readROM8WithoutIntercept","readROM8","GameBoyAdvanceSaves","saveIntercept","EMERALD_SAVE_2_PTR","EMERALD_XOR_KEY_OFFSET","EMERALD_XOR_KEY_LENGTH","EMERALD_ITEM_OFFSET","EMERALD_ITEM_LENGTH","EMERALD_KEY_ITEM_OFFSET","EMERALD_KEY_ITEM_LENGTH","EMERALD_BALL_OFFSET","EMERALD_BALL_LENGTH","EMERALD_TM_OFFSET","EMERALD_TM_LENGTH","EMERALD_BERRIES_OFFSET","EMERALD_BERRIES_LENGTH","itemPocket","keyItemsPocket","ballItemPocket","tmCase","berryPocket","clear","save2Start","xorKey16","read16","save1Start","readItemSection","writeData","isLoadingScreen","writeItemSection","offset","length","storeTo","i","item","ballQuantity","store","storeArr","quantity","item1","ITEM_DATA","Nothing","number","quantity1","hasKeyItem","EMERALD_BASE_FLAGS_OFFSET","EMERALD_SYS_FLAGS_OFFSET","EMERALD_BADGE1_OFFSET","EMERALD_BADGE2_OFFSET","EMERALD_BADGE3_OFFSET","EMERALD_BADGE4_OFFSET","EMERALD_BADGE5_OFFSET","EMERALD_BADGE6_OFFSET","EMERALD_BADGE7_OFFSET","EMERALD_BADGE8_OFFSET","EMERALD_RUNNING_SHOE_OFFSET","EMERALD_POKEDEX_OFFSET","EMERALD_NATIONAL_DEX_OFFSET","EMERALD_BADGE_OFFSETS","EMERALD_BASE_VAR_OFFSET","EMERALD_STARTER_CHOICE_OFFSET","bag","badge1","badge2","badge3","badge4","badge5","badge6","badge7","badge8","hasRunningShoes","modifyBadge","badgeNumber","shouldGiveOrRemoveBit","modifySystemFlag","modifyRunningShoes","manager","readFlags","savePtr","readSystemFlag","game","getFlag","readBaseFlag","saveOffset","sectionOffset","flagOffset","flagBit","ceil","toString","padStart","reverse","value","byteArr","parseInt","join"],"version":3,"file":"build-index.893e67f7.js.map"}