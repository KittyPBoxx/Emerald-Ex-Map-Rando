{"mappings":"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","sources":["dist/CoreHacks/EmulationCoreHacks.js"],"sourcesContent":["/**\n * Random Warp Script\n */\nvar isWarping = false;\nvar randomWarpsEnabled = true;\n\n/******************/\n/* Warp Addresses */\n/******************/\n/**\n *  Order of events for a warp script\n * \n *  1) A player steps on a warp tile\n *  2) A write8 is perforemed to bank, then map, then warp for current game\n *  3) Several read8s are performed to bank, then map, then warp \n *  4) Exit animation is played (i.e walking through a door) and screen fades to black\n *  5) A write32 is done to the last bank address\n *  6) New map is loaded and fades in then enterance animation is played \n * \n *  Warp flow:\n * \n *  Within game:\n *  Wait for write to warp address -> \n *  switch to warping state -> \n *  wait for next read from warp address -> \n *  before reading overwrite it -> \n *  update flags e.t.c\n *  continue  \n */\nconst EMERALD_CURRENT_BANK = 0x2032ee4;\nconst EMERALD_CURRENT_MAP  = 0x2032ee5;\nconst EMERALD_CURRENT_WARP = 0x2032ee6;\n\nvar flagManager; // only global to help debugging\n\nconst SPEEDUP_HACKS_MODE = { ON: 2, BATTLE_ONLY: 1, OFF: 0}\nvar speedupHackState = SPEEDUP_HACKS_MODE.ON;\n\nfunction setSpeedupHackState(mode) {\n    if (mode == SPEEDUP_HACKS_MODE.ON) {\n        bypassWait = true;\n        speedupHackState = SPEEDUP_HACKS_MODE.ON\n    } else if (mode == SPEEDUP_HACKS_MODE.BATTLE_ONLY) {\n        bypassWait = false;\n        speedupHackState = SPEEDUP_HACKS_MODE.BATTLE_ONLY;\n    } else if (mode == SPEEDUP_HACKS_MODE.OFF) {\n        bypassWait = false;\n        speedupHackState = SPEEDUP_HACKS_MODE.OFF;\n    }\n}\n\nasync function disableBypassWait() {\n    bypassWait = false;\n    await delay(500);\n    bypassWait = true;\n}\n\nvar usingHomeWarp = false;\nGameBoyAdvanceCPU.prototype.write32WithoutIntercept = GameBoyAdvanceCPU.prototype.write32;\nGameBoyAdvanceCPU.prototype.write32 = function (address, data) { \n\n    if (address == 0x02038c5c && speedupHackState == SPEEDUP_HACKS_MODE.ON) {\n        if (data == -1) {\n            disableBypassWait();\n        }\n    } else if (address == 0x02020004) {\n        // Make emulation more accurate :/\n        data = 0;\n    } else if (address == 0x02025364 && speedupHackState == SPEEDUP_HACKS_MODE.BATTLE_ONLY) {\n        bypassWait = true;\n    }    \n\n    if (usingHomeWarp && address == EMERALD_CURRENT_BANK){\n        this.write8(EMERALD_CURRENT_BANK, 0);\n        this.write8(EMERALD_CURRENT_MAP, 9);\n        this.write8(EMERALD_CURRENT_WARP, 1);\n        usingHomeWarp = false;\n        return;\n    }\n\n    this.write32WithoutIntercept(address, data);\n}\n\n// GameBoyAdvanceCPU.prototype.write16WithoutIntercept = GameBoyAdvanceCPU.prototype.write16;\n// GameBoyAdvanceCPU.prototype.write16 = function (address, data) { \n//     this.write16WithoutIntercept(address, data);\n// }\n\n GameBoyAdvanceCPU.prototype.write8WithoutIntercept = GameBoyAdvanceCPU.prototype.write8;\n GameBoyAdvanceCPU.prototype.write8 = function (address, data) { \n\n    if (address == EMERALD_CURRENT_WARP){\n        isWarping = randomWarpsEnabled || forceNextWarp;\n    } else if (address == 0x02024f0e && data != 0 && speedupHackState == SPEEDUP_HACKS_MODE.BATTLE_ONLY) {\n        bypassWait = false;\n    }\n    \n    this.write8WithoutIntercept(address, data);\n }\n\n\nconst EMERALD_MOVEMENT_MODE_OFFSET = 0x02037590;\nconst FIRE_RED_MOVEMENT_MODE_OFFSET = 0x02037078;\nconst MOVEMENT_MODE_WALK = 0x01;\nconst MOVEMENT_MODE_BIKE = 0x02;\nconst MOVEMENT_MODE_SURF = 0x08;\nvar teleportAnywhere = false;\nGameBoyAdvanceCPU.prototype.read8WithoutIntercept = GameBoyAdvanceCPU.prototype.read8;\nGameBoyAdvanceCPU.prototype.read8 = function (address) {\n\n    \n    if (!isWarping) return this.read8WithoutIntercept(address);\n\n    if (address == EMERALD_CURRENT_BANK) \n    {\n        address = this.handleWarpRedirection(address, IodineGUI.Iodine.IOCore.cartridge.romCode);\n    }\n\n    return this.read8WithoutIntercept(address);\n}\n\nvar reverseNextWarp = false; // Set true when loading a save state that was going through a warp\nvar forceNextWarp = null;\nGameBoyAdvanceCPU.prototype.handleWarpRedirection = function (address, romCode) {\n\n    let bank = this.read8WithoutIntercept(address);\n    let map = this.read8WithoutIntercept(address + 1);\n    let warpNo = this.read8WithoutIntercept(address + 2);\n    \n    if (warpNo == 255) { \n\n        // Special Fix for norman after the tutorial\n        if (romCode + \",\" + bank + \",\" + map + \",\" + warpNo == \"E,8,1,255\") {\n            writeGameVar(0x4085, 6);\n            modifyBaseFlag(0x2D6, 1);\n            modifyBaseFlag(0x362, 1);\n        }\n\n        // Avoid scripted warps, route connections without zone e.t.c\n        return address; \n    }\n\n    let pkWarp = null;\n    let trigger = romCode + \",\" + bank + \",\" + map + \",\" + warpNo;\n\n    if (forceNextWarp) {\n        let toParts = forceNextWarp.split(\",\");\n        pkWarp = new PKWarp(trigger, toParts[0], toParts[1], toParts[2], toParts[3], forceNextWarp)\n        reverseNextWarp = false;\n        forceNextWarp = null;\n    } else if(reverseNextWarp && warpList.get(trigger)) {\n        let source = warpList.get(trigger).source;\n        let toParts = source.split(\",\");\n        pkWarp = new PKWarp(trigger, toParts[0], toParts[1], toParts[2], toParts[3], source)\n        reverseNextWarp = false;\n    } else {\n        pkWarp = warpList.get(trigger);\n        console.log(\"Warping triggered for \" + trigger); \n    }\n\n    if (pkWarp) {\n\n        this.write8(EMERALD_CURRENT_BANK, pkWarp.toBank);\n        this.write8(EMERALD_CURRENT_MAP, pkWarp.toMap);\n        this.write8(EMERALD_CURRENT_WARP, pkWarp.toWarpNo);\n\n        specialWarpHandling(pkWarp);\n\n        console.log(\"Warping sending to \" + pkWarp.toRomCode + \",\" + pkWarp.toBank + \",\" + pkWarp.toMap + \",\" + pkWarp.toWarpNo); \n    } else {\n        console.log(\"Warping sending to vanilla\"); \n    }\n    \n    isWarping = false;\n\n    return address;\n}\n\n/*\n*   DuringWarp handling takes place before the warp had happened but after the new rom has been loaded\n*   This is useful for when you need to set a flag/var in  a game you are loading before the new map loads\n*/\nfunction specialWarpHandling(pkwarp) {\n    \n    let destination = pkwarp.toRomCode + \",\" + pkwarp.toBank + \",\" + pkwarp.toMap + \",\" + pkwarp.toWarpNo;\n\n    // Open Regi Caves\n\n    // Show Mirage Tower\n\n    // Make sure it dosn't think we are on cycling road\n\n    // Make sure guy is moved from from devon corp floor one\n    \n    // If trickmaster reached end state we need to reset him\n\n    // If muesum defeated we need to open up that warp in slateport\n\n    // If Petalburg Gym make either catch tutorial or battle\n    if (destination == \"E,8,1,0\") {\n        // If catch tutorial hasn't been done we set to that\n        // otherwise we set to battle state\n        let normanState = readGameVar(0x4085);\n        if (normanState < 2) {\n            writeGameVar(0x4085, 0)\n        } else {\n            writeGameVar(0x4085, 6)\n        }\n    } else if (destination == \"E,16,0,0\") {\n        // E4 rooms needs to walk fowards when entering\n        writeGameVar(0x409C, 0);\n    } else if (destination == \"E,16,0,1\")  {\n        writeGameVar(0x409C, 1);\n    } else if (destination == \"E,16,1,0\") {\n        writeGameVar(0x409C, 1);\n    } else if (destination == \"E,16,1,1\") {\n        writeGameVar(0x409C, 2);\n    } else if (destination == \"E,16,2,0\") {\n        writeGameVar(0x409C, 2);\n    } else if (destination == \"E,16,2,1\") {\n        writeGameVar(0x409C, 3);\n    } else if (destination == \"E,16,3,0\") {\n        writeGameVar(0x409C, 3);\n    } else if (destination == \"E,16,3,1\") {\n        writeGameVar(0x409C, 4);\n    } else  if (destination == \"E,10,0,0\") {\n        // If Mauville Gym make battle\n        new FlagManager().setFlag(IodineGUI.Iodine.IOCore.cpu.read32(EMERALD_SAVE_1_PTR), 0x1270, 0x391, 0);\n    }\n\n}\n\n/***********************/\n/* Dynamic rom patches */  \n/***********************/\n\n\nconst MAP_TYPE_ADDRESS = 0x2037f2f;\nconst MAP_TYPES = {\n    NONE       : 0,\n    TOWN       : 1,\n    CITY       : 2,\n    ROUTE      : 3,\n    UNDERGROUND: 4,\n    UNDERWATER : 5,\n    OCEAN_ROUTE: 6,\n    UNKNOWN    : 7, // Not used by any map.\n    INDOOR     : 8,\n    SECRET_BASE: 9\n};\n\nfunction isMapOutside() {\n    let mapType = IodineGUI.Iodine.IOCore.cpu.read8(MAP_TYPE_ADDRESS);\n    return mapType == MAP_TYPES.NONE ||\n           mapType == MAP_TYPES.TOWN ||\n           mapType == MAP_TYPES.CITY ||\n           mapType == MAP_TYPES.ROUTE ||\n           mapType == MAP_TYPES.UNDERWATER ||\n           mapType == MAP_TYPES.OCEAN_ROUTE;\n}\n\nGameBoyAdvanceMultiCartridge.prototype.readROM16WithoutIntercept = GameBoyAdvanceMultiCartridge.prototype.readROM16;\nGameBoyAdvanceMultiCartridge.prototype.readROM16 = function (address) {\n    \n    if (address == 0xb9f78) {\n        console.log(\"Destination to escape warp\");\n\n        if (isMapOutside()) {\n            usingHomeWarp = true;\n        }\n    }   \n\n    return this.readROM16WithoutIntercept(address);\n}\n\nvar currentlySaving = false;\nGameBoyAdvanceMultiCartridge.prototype.readROM8WithoutIntercept = GameBoyAdvanceMultiCartridge.prototype.readROM8;\nGameBoyAdvanceMultiCartridge.prototype.readROM8 = function (address) {\n\n    if (currentlySaving) {\n        if ((address == 3084361 || address == 8455992)) {\n            console.log(\"saved\");\n            saveAfterDelay();\n            currentlySaving = false;\n        }\n    }\n\n    return this.readROM8WithoutIntercept(address);\n}\n\nasync function saveAfterDelay() {\n    await delay(200);\n    IodineGUI.Iodine.exportSave();\n}\n\nGameBoyAdvanceSaves.prototype.saveIntercept = function(address, data) {\n    if (address == 0 && data == 48) {\n        currentlySaving = true;\n    } \n}\n\n/******************/\n/* Data Addresses */\n/******************/\n/**\n *  Addresses for save data, Team is not copied here because we use where it is statically stored in memory\n *  Addresses are offsets from the 32bit addresses that can be found using the pointers (ptr locations are static)\n *  Money is xor'd against 32bit xor key, item quantity is xor'd against the first 2 bytes of that key.\n *  \n *  Dynamicly Addressed memory means the three sections of data move in memory (hence we need to look the up with ptrs)\n *  These change each time the bag is accessed or a warp is triggered (and at various other times)\n * \n *  There are 3 dynamic sections. SAV1 (mostly relating to team and items)\n *  SAV2 (storing the xor key, and trainer data, play time, settings, seen mons e.t.c)\n *  We don't deal with SAV3 but it's mostly boxed pokemon / box config   \n */\n\n\n// DYNAMIC SAV1 PTRs\nconst EMERALD_SAVE_1_PTR = 0x03004cac;\n\n// DYNAMIC SAV2 PTRs\nconst EMERALD_SAVE_2_PTR = 0x03004cb0;\n\n/*******************/\n/* Flag Management */\n/*******************/\n\n// This handles any general vars/flags that need to be transfered when switching games\n\n// IN DYNAMIC SAV1\n// The equations are so the offsets line up the the flags defined in the decomp projects\n// https://github.com/pret/pokeemerald/blob/master/include/constants/flags.h\n// https://github.com/pret/pokeemerald/blob/master/include/constants/vars.h\nconst EMERALD_BASE_FLAGS_OFFSET   = 0x1270;\nconst EMERALD_SYS_FLAGS_OFFSET    = 0x137C;\nconst EMERALD_BADGE1_OFFSET       = 0x7;\nconst EMERALD_BADGE2_OFFSET       = 0x8;\nconst EMERALD_BADGE3_OFFSET       = 0x9;\nconst EMERALD_BADGE4_OFFSET       = 0xA;\nconst EMERALD_BADGE5_OFFSET       = 0xB;\nconst EMERALD_BADGE6_OFFSET       = 0xC;\nconst EMERALD_BADGE7_OFFSET       = 0xD;\nconst EMERALD_BADGE8_OFFSET       = 0xE;\nconst EMERALD_RUNNING_SHOE_OFFSET = 0x60;\nconst EMERALD_POKEDEX_OFFSET      = 0x1; \nconst EMERALD_NATIONAL_DEX_OFFSET = 0x36;\nconst EMERALD_BADGE_OFFSETS = [EMERALD_BADGE1_OFFSET, \n                               EMERALD_BADGE2_OFFSET, \n                               EMERALD_BADGE3_OFFSET, \n                               EMERALD_BADGE4_OFFSET, \n                               EMERALD_BADGE5_OFFSET, \n                               EMERALD_BADGE6_OFFSET, \n                               EMERALD_BADGE7_OFFSET, \n                               EMERALD_BADGE8_OFFSET];\n\nconst EMERALD_BASE_VAR_OFFSET = 0x139c;\n\nconst EMERALD_STARTER_CHOICE_OFFSET = 0x4023;\n\nfunction FlagManager() {\n    this.badge1 = null;\n    this.badge2 = null;\n    this.badge3 = null;\n    this.badge4 = null;\n    this.badge5 = null;\n    this.badge6 = null;\n    this.badge7 = null;\n    this.badge8 = null;\n    this.hasRunningShoes = null;\n}\n\nFlagManager.prototype.getFlag = function (saveOffset, sectionOffset, flagOffset) {\n\n    let flagByte = IodineGUI.Iodine.IOCore.cpu.read8(saveOffset + sectionOffset + Math.ceil((flagOffset + 1) / 8) - 1);\n    let flagBit = flagOffset % 8;\n\n    return !!+flagByte.toString(2).padStart(8, 0).split(\"\").reverse()[flagBit];\n}\n\nFlagManager.prototype.setFlag = function (saveOffset, sectionOffset, flagOffset, value) {\n\n    let flagByte = IodineGUI.Iodine.IOCore.cpu.read8(saveOffset + sectionOffset + Math.ceil((flagOffset + 1) / 8) - 1);\n    let flagBit = flagOffset % 8;\n\n    let byteArr = flagByte.toString(2).padStart(8, 0).split(\"\").reverse();\n    byteArr[flagBit] = value;\n\n    IodineGUI.Iodine.IOCore.cpu.write8(saveOffset + sectionOffset + Math.ceil((flagOffset + 1) / 8) - 1, parseInt(byteArr.reverse().join(\"\"), 2));\n\n}\n\nFlagManager.prototype.readFlags = function () {\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(EMERALD_SAVE_1_PTR);\n\n    this.badge1          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE1_OFFSET);\n    this.badge2          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE2_OFFSET);\n    this.badge3          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE3_OFFSET);\n    this.badge4          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE4_OFFSET);\n    this.badge5          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE5_OFFSET);\n    this.badge6          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE6_OFFSET);\n    this.badge7          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE7_OFFSET);\n    this.badge8          = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_BADGE8_OFFSET);\n    this.hasRunningShoes = this.getFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_RUNNING_SHOE_OFFSET);\n}\n\nFlagManager.prototype.writeFlags = function () {\n\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(EMERALD_SAVE_1_PTR);\n\n    this.setFlag(save1Start, EMERALD_SYS_FLAGS_OFFSET, EMERALD_RUNNING_SHOE_OFFSET, +this.hasRunningShoes);\n\n    // Open regi doors\n    this.setFlag(save1Start, EMERALD_BASE_FLAGS_OFFSET, 0xE4, 1);\n\n    // Not On Bike Path\n    modifySystemFlag(0x2B, 0);\n}\n\n\nfunction modifyBadge(badgeNumber, shouldGiveOrRemoveBit) {\n\n    modifySystemFlag(EMERALD_BADGE_OFFSETS[badgeNumber - 1], shouldGiveOrRemoveBit);\n\n}\n\nfunction modifyRunningShoes(shouldGiveOrRemoveBit) {\n\n    modifySystemFlag(EMERALD_RUNNING_SHOE_OFFSET, shouldGiveOrRemoveBit);\n\n}\n\nfunction modifySystemFlag(offset, shouldGiveOrRemoveBit) {\n\n    let manager = new FlagManager();\n    manager.readFlags();\n\n    let savePtr = EMERALD_SAVE_1_PTR;\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(savePtr);\n\n    let sysFlagOffset = EMERALD_SYS_FLAGS_OFFSET;\n\n    manager.setFlag(save1Start, sysFlagOffset, offset, shouldGiveOrRemoveBit);\n}\n\nfunction modifyBaseFlag(offset, shouldGiveOrRemoveBit) {\n\n    let manager = new FlagManager();\n    manager.readFlags();\n\n    let savePtr = EMERALD_SAVE_1_PTR;\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(savePtr);\n\n    let sysFlagOffset = EMERALD_BASE_FLAGS_OFFSET;\n\n    manager.setFlag(save1Start, sysFlagOffset, offset, shouldGiveOrRemoveBit);\n\n}\n\nfunction readSystemFlag(offset) {\n\n    let manager = new FlagManager();\n    manager.readFlags(game);\n\n    let savePtr = EMERALD_SAVE_1_PTR;\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(savePtr);\n\n    let sysFlagOffset = EMERALD_SYS_FLAGS_OFFSET;\n\n    return manager.getFlag(save1Start, sysFlagOffset, offset);\n\n}\nfunction writeGameVar(offset, data) {\n\n    let savePtr = EMERALD_SAVE_1_PTR;\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(savePtr);\n\n    let baseVarOffset = EMERALD_BASE_VAR_OFFSET;\n\n    IodineGUI.Iodine.IOCore.cpu.write16(save1Start + baseVarOffset + ((offset - 0x4000) * 2), data);\n}\n\nfunction readGameVar(offset) {\n\n    let savePtr = EMERALD_SAVE_1_PTR;\n    let save1Start = IodineGUI.Iodine.IOCore.cpu.read32(savePtr);\n\n    let baseVarOffset = EMERALD_BASE_VAR_OFFSET;\n\n    return IodineGUI.Iodine.IOCore.cpu.read16(save1Start + baseVarOffset + ((offset - 0x4000) * 2));\n}"],"names":["isWarping","randomWarpsEnabled","EMERALD_CURRENT_BANK","EMERALD_CURRENT_MAP","EMERALD_CURRENT_WARP","flagManager","SPEEDUP_HACKS_MODE","ON","BATTLE_ONLY","OFF","speedupHackState","setSpeedupHackState","mode","bypassWait","async","disableBypassWait","delay","usingHomeWarp","GameBoyAdvanceCPU","prototype","write32WithoutIntercept","write32","address","data","this","write8","write8WithoutIntercept","forceNextWarp","EMERALD_MOVEMENT_MODE_OFFSET","FIRE_RED_MOVEMENT_MODE_OFFSET","MOVEMENT_MODE_WALK","MOVEMENT_MODE_BIKE","MOVEMENT_MODE_SURF","teleportAnywhere","read8WithoutIntercept","read8","handleWarpRedirection","IodineGUI","Iodine","IOCore","cartridge","romCode","reverseNextWarp","specialWarpHandling","pkwarp","destination","toRomCode","toBank","toMap","toWarpNo","writeGameVar","readGameVar","FlagManager","setFlag","cpu","read32","EMERALD_SAVE_1_PTR","bank","map","warpNo","modifyBaseFlag","pkWarp","trigger","toParts","split","PKWarp","warpList","get","source","toParts1","console","log","MAP_TYPE_ADDRESS","MAP_TYPES","NONE","TOWN","CITY","ROUTE","UNDERGROUND","UNDERWATER","OCEAN_ROUTE","UNKNOWN","INDOOR","SECRET_BASE","isMapOutside","mapType","GameBoyAdvanceMultiCartridge","readROM16WithoutIntercept","readROM16","currentlySaving","saveAfterDelay","exportSave","readROM8WithoutIntercept","readROM8","GameBoyAdvanceSaves","saveIntercept","EMERALD_SAVE_2_PTR","EMERALD_BASE_FLAGS_OFFSET","EMERALD_SYS_FLAGS_OFFSET","EMERALD_BADGE1_OFFSET","EMERALD_BADGE2_OFFSET","EMERALD_BADGE3_OFFSET","EMERALD_BADGE4_OFFSET","EMERALD_BADGE5_OFFSET","EMERALD_BADGE6_OFFSET","EMERALD_BADGE7_OFFSET","EMERALD_BADGE8_OFFSET","EMERALD_RUNNING_SHOE_OFFSET","EMERALD_POKEDEX_OFFSET","EMERALD_NATIONAL_DEX_OFFSET","EMERALD_BADGE_OFFSETS","EMERALD_BASE_VAR_OFFSET","EMERALD_STARTER_CHOICE_OFFSET","badge1","badge2","badge3","badge4","badge5","badge6","badge7","badge8","hasRunningShoes","modifyBadge","badgeNumber","shouldGiveOrRemoveBit","modifySystemFlag","modifyRunningShoes","offset","manager","readFlags","savePtr","save1Start","readSystemFlag","game","getFlag","write16","read16","saveOffset","sectionOffset","flagOffset","flagBit","Math","ceil","toString","padStart","reverse","value","byteArr","parseInt","join","writeFlags"],"version":3,"file":"build-index.d1abee3e.js.map"}